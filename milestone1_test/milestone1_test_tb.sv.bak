`timescale 1ns/1ps

module milestone1_test_tb;

  // Inputs
  reg clk_i;
  reg rst_i;
  reg dime_i;
  reg nickle_i;
  reg quarter_i;

  // Outputs
  wire soda_o;
  wire [2:0] change_o;

  // Instantiate the Unit Under Test (UUT)
  milestone1_test uut (
    .clk_i(clk_i),
    .rst_i(rst_i),
    .dime_i(dime_i),
    .nickle_i(nickle_i),
    .quarter_i(quarter_i),
    .soda_o(soda_o),
    .change_o(change_o)
  );

  // Clock generation
  initial begin
    clk_i = 0;
    forever #5 clk_i = ~clk_i; // 100 MHz clock
  end

  // Test vectors
  initial begin
    // Initialize Inputs
    rst_i = 1;
    dime_i = 0;
    nickle_i = 0;
    quarter_i = 0;

    // Reset the system
    rst_i = 0;
    #10 rst_i = 1;

    // Test Case 1: Insert a nickel
    #10 nickle_i = 1;
    #10 nickle_i = 0;

    // Test Case 2: Insert a dime
    #10 dime_i = 1;
    #10 dime_i = 0;

    // Test Case 3: Insert a quarter
    #10 quarter_i = 1;
    #10 quarter_i = 0;

    // Test Case 4: Insert multiple coins
    #10 nickle_i = 1;
    #10 nickle_i = 0;
    #10 dime_i = 1;
    #10 dime_i = 0;
    #10 quarter_i = 1;
    #10 quarter_i = 0;

    // Test Case 5: Reset the system
    #10 rst_i = 0;
    #10 rst_i = 1;

    // Finish the simulation
    #100;
    $stop;
  end

  // Monitor outputs
  initial begin
    $monitor("Time=%0t | rst_i=%b | dime_i=%b | nickle_i=%b | quarter_i=%b | soda_o=%b | change_o=%b",
             $time, rst_i, dime_i, nickle_i, quarter_i, soda_o, change_o);
  end

endmodule
