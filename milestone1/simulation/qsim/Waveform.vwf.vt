// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/02/2024 18:47:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    milestone1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module milestone1_vlg_sample_tst(
	i_clk,
	i_dime,
	i_nickel,
	i_quarter,
	sampler_tx
);
input  i_clk;
input  i_dime;
input  i_nickel;
input  i_quarter;
output sampler_tx;

reg sample;
time current_time;
always @(i_clk or i_dime or i_nickel or i_quarter)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module milestone1_vlg_check_tst (
	o_change,
	o_soda,
	sampler_rx
);
input [2:0] o_change;
input  o_soda;
input sampler_rx;

reg [2:0] o_change_expected;
reg  o_soda_expected;

reg [2:0] o_change_prev;
reg  o_soda_prev;

reg [2:0] o_change_expected_prev;
reg  o_soda_expected_prev;

reg [2:0] last_o_change_exp;
reg  last_o_soda_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_change_prev = o_change;
	o_soda_prev = o_soda;
end

// update expected /o prevs

always @(trigger)
begin
	o_change_expected_prev = o_change_expected;
	o_soda_expected_prev = o_soda_expected;
end


// expected o_change[ 2 ]
initial
begin
	o_change_expected[2] = 1'bX;
end 
// expected o_change[ 1 ]
initial
begin
	o_change_expected[1] = 1'bX;
end 
// expected o_change[ 0 ]
initial
begin
	o_change_expected[0] = 1'bX;
end 

// expected o_soda
initial
begin
	o_soda_expected = 1'bX;
end 
// generate trigger
always @(o_change_expected or o_change or o_soda_expected or o_soda)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_change = %b | expected o_soda = %b | ",o_change_expected_prev,o_soda_expected_prev);
	$display("| real o_change = %b | real o_soda = %b | ",o_change_prev,o_soda_prev);
`endif
	if (
		( o_change_expected_prev[0] !== 1'bx ) && ( o_change_prev[0] !== o_change_expected_prev[0] )
		&& ((o_change_expected_prev[0] !== last_o_change_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_change[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_change_expected_prev);
		$display ("     Real value = %b", o_change_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_change_exp[0] = o_change_expected_prev[0];
	end
	if (
		( o_change_expected_prev[1] !== 1'bx ) && ( o_change_prev[1] !== o_change_expected_prev[1] )
		&& ((o_change_expected_prev[1] !== last_o_change_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_change[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_change_expected_prev);
		$display ("     Real value = %b", o_change_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_change_exp[1] = o_change_expected_prev[1];
	end
	if (
		( o_change_expected_prev[2] !== 1'bx ) && ( o_change_prev[2] !== o_change_expected_prev[2] )
		&& ((o_change_expected_prev[2] !== last_o_change_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_change[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_change_expected_prev);
		$display ("     Real value = %b", o_change_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_change_exp[2] = o_change_expected_prev[2];
	end
	if (
		( o_soda_expected_prev !== 1'bx ) && ( o_soda_prev !== o_soda_expected_prev )
		&& ((o_soda_expected_prev !== last_o_soda_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_soda :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_soda_expected_prev);
		$display ("     Real value = %b", o_soda_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_o_soda_exp = o_soda_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module milestone1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_clk;
reg i_dime;
reg i_nickel;
reg i_quarter;
// wires                                               
wire [2:0] o_change;
wire o_soda;

wire sampler;                             

// assign statements (if any)                          
milestone1 i1 (
// port map - connection between master ports and signals/registers   
	.i_clk(i_clk),
	.i_dime(i_dime),
	.i_nickel(i_nickel),
	.i_quarter(i_quarter),
	.o_change(o_change),
	.o_soda(o_soda)
);

// i_clk
initial
begin
	repeat(16)
	begin
		i_clk = 1'b0;
		i_clk = #30000 1'b1;
		# 30000;
	end
	i_clk = 1'b0;
	i_clk = #30000 1'b1;
end 

// i_nickel
initial
begin
	i_nickel = 1'b0;
	i_nickel = #280000 1'b1;
	i_nickel = #60000 1'b0;
end 

// i_dime
initial
begin
	i_dime = 1'b0;
	i_dime = #100000 1'b1;
	i_dime = #60000 1'b0;
	i_dime = #180000 1'b1;
	i_dime = #60000 1'b0;
end 

// i_quarter
initial
begin
	i_quarter = 1'b0;
	i_quarter = #160000 1'b1;
	i_quarter = #60000 1'b0;
	i_quarter = #180000 1'b1;
	i_quarter = #60000 1'b0;
end 

milestone1_vlg_sample_tst tb_sample (
	.i_clk(i_clk),
	.i_dime(i_dime),
	.i_nickel(i_nickel),
	.i_quarter(i_quarter),
	.sampler_tx(sampler)
);

milestone1_vlg_check_tst tb_out(
	.o_change(o_change),
	.o_soda(o_soda),
	.sampler_rx(sampler)
);
endmodule

