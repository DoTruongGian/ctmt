// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2024 23:12:47"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    pipeline
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module pipeline_vlg_sample_tst(
	i_clk,
	i_io_btn,
	i_io_sw,
	i_rst_n,
	sampler_tx
);
input  i_clk;
input [3:0] i_io_btn;
input [31:0] i_io_sw;
input  i_rst_n;
output sampler_tx;

reg sample;
time current_time;
always @(i_clk or i_io_btn or i_io_sw or i_rst_n)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module pipeline_vlg_check_tst (
	ForwardAE_check,
	ForwardBE_check,
	alu_data_M_check,
	checker1,
	checker2,
	checker3,
	checker4,
	ldStall_check,
	o_insn_vld,
	o_io_hex0,
	o_io_hex1,
	o_io_hex2,
	o_io_hex3,
	o_io_hex4,
	o_io_hex5,
	o_io_hex6,
	o_io_hex7,
	o_io_lcd,
	o_io_ledg,
	o_io_ledr,
	o_pc_debug,
	rs1_data_HE_check,
	rs2_data_HE_check,
	rs2_data_HM_check,
	sampler_rx
);
input [1:0] ForwardAE_check;
input [1:0] ForwardBE_check;
input [31:0] alu_data_M_check;
input [31:0] checker1;
input [31:0] checker2;
input [31:0] checker3;
input [31:0] checker4;
input  ldStall_check;
input  o_insn_vld;
input [6:0] o_io_hex0;
input [6:0] o_io_hex1;
input [6:0] o_io_hex2;
input [6:0] o_io_hex3;
input [6:0] o_io_hex4;
input [6:0] o_io_hex5;
input [6:0] o_io_hex6;
input [6:0] o_io_hex7;
input [31:0] o_io_lcd;
input [31:0] o_io_ledg;
input [31:0] o_io_ledr;
input [31:0] o_pc_debug;
input [31:0] rs1_data_HE_check;
input [31:0] rs2_data_HE_check;
input [31:0] rs2_data_HM_check;
input sampler_rx;

reg [1:0] ForwardAE_check_expected;
reg [1:0] ForwardBE_check_expected;
reg [31:0] alu_data_M_check_expected;
reg [31:0] checker1_expected;
reg [31:0] checker2_expected;
reg [31:0] checker3_expected;
reg [31:0] checker4_expected;
reg  ldStall_check_expected;
reg  o_insn_vld_expected;
reg [6:0] o_io_hex0_expected;
reg [6:0] o_io_hex1_expected;
reg [6:0] o_io_hex2_expected;
reg [6:0] o_io_hex3_expected;
reg [6:0] o_io_hex4_expected;
reg [6:0] o_io_hex5_expected;
reg [6:0] o_io_hex6_expected;
reg [6:0] o_io_hex7_expected;
reg [31:0] o_io_lcd_expected;
reg [31:0] o_io_ledg_expected;
reg [31:0] o_io_ledr_expected;
reg [31:0] o_pc_debug_expected;
reg [31:0] rs1_data_HE_check_expected;
reg [31:0] rs2_data_HE_check_expected;
reg [31:0] rs2_data_HM_check_expected;

reg [1:0] ForwardAE_check_prev;
reg [1:0] ForwardBE_check_prev;
reg [31:0] alu_data_M_check_prev;
reg [31:0] checker1_prev;
reg [31:0] checker2_prev;
reg [31:0] checker3_prev;
reg [31:0] checker4_prev;
reg  ldStall_check_prev;
reg  o_insn_vld_prev;
reg [6:0] o_io_hex0_prev;
reg [6:0] o_io_hex1_prev;
reg [6:0] o_io_hex2_prev;
reg [6:0] o_io_hex3_prev;
reg [6:0] o_io_hex4_prev;
reg [6:0] o_io_hex5_prev;
reg [6:0] o_io_hex6_prev;
reg [6:0] o_io_hex7_prev;
reg [31:0] o_io_lcd_prev;
reg [31:0] o_io_ledg_prev;
reg [31:0] o_io_ledr_prev;
reg [31:0] o_pc_debug_prev;
reg [31:0] rs1_data_HE_check_prev;
reg [31:0] rs2_data_HE_check_prev;
reg [31:0] rs2_data_HM_check_prev;

reg [1:0] ForwardAE_check_expected_prev;
reg [1:0] ForwardBE_check_expected_prev;
reg [31:0] alu_data_M_check_expected_prev;
reg [31:0] checker1_expected_prev;
reg [31:0] checker2_expected_prev;
reg [31:0] checker3_expected_prev;
reg [31:0] checker4_expected_prev;
reg  ldStall_check_expected_prev;
reg  o_insn_vld_expected_prev;
reg [6:0] o_io_hex0_expected_prev;
reg [6:0] o_io_hex1_expected_prev;
reg [6:0] o_io_hex2_expected_prev;
reg [6:0] o_io_hex3_expected_prev;
reg [6:0] o_io_hex4_expected_prev;
reg [6:0] o_io_hex5_expected_prev;
reg [6:0] o_io_hex6_expected_prev;
reg [6:0] o_io_hex7_expected_prev;
reg [31:0] o_io_lcd_expected_prev;
reg [31:0] o_io_ledg_expected_prev;
reg [31:0] o_io_ledr_expected_prev;
reg [31:0] o_pc_debug_expected_prev;
reg [31:0] rs1_data_HE_check_expected_prev;
reg [31:0] rs2_data_HE_check_expected_prev;
reg [31:0] rs2_data_HM_check_expected_prev;

reg [1:0] last_ForwardAE_check_exp;
reg [1:0] last_ForwardBE_check_exp;
reg [31:0] last_alu_data_M_check_exp;
reg [31:0] last_checker1_exp;
reg [31:0] last_checker2_exp;
reg [31:0] last_checker3_exp;
reg [31:0] last_checker4_exp;
reg  last_ldStall_check_exp;
reg  last_o_insn_vld_exp;
reg [6:0] last_o_io_hex0_exp;
reg [6:0] last_o_io_hex1_exp;
reg [6:0] last_o_io_hex2_exp;
reg [6:0] last_o_io_hex3_exp;
reg [6:0] last_o_io_hex4_exp;
reg [6:0] last_o_io_hex5_exp;
reg [6:0] last_o_io_hex6_exp;
reg [6:0] last_o_io_hex7_exp;
reg [31:0] last_o_io_lcd_exp;
reg [31:0] last_o_io_ledg_exp;
reg [31:0] last_o_io_ledr_exp;
reg [31:0] last_o_pc_debug_exp;
reg [31:0] last_rs1_data_HE_check_exp;
reg [31:0] last_rs2_data_HE_check_exp;
reg [31:0] last_rs2_data_HM_check_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:24] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 24'b1;
end

// update real /o prevs

always @(trigger)
begin
	ForwardAE_check_prev = ForwardAE_check;
	ForwardBE_check_prev = ForwardBE_check;
	alu_data_M_check_prev = alu_data_M_check;
	checker1_prev = checker1;
	checker2_prev = checker2;
	checker3_prev = checker3;
	checker4_prev = checker4;
	ldStall_check_prev = ldStall_check;
	o_insn_vld_prev = o_insn_vld;
	o_io_hex0_prev = o_io_hex0;
	o_io_hex1_prev = o_io_hex1;
	o_io_hex2_prev = o_io_hex2;
	o_io_hex3_prev = o_io_hex3;
	o_io_hex4_prev = o_io_hex4;
	o_io_hex5_prev = o_io_hex5;
	o_io_hex6_prev = o_io_hex6;
	o_io_hex7_prev = o_io_hex7;
	o_io_lcd_prev = o_io_lcd;
	o_io_ledg_prev = o_io_ledg;
	o_io_ledr_prev = o_io_ledr;
	o_pc_debug_prev = o_pc_debug;
	rs1_data_HE_check_prev = rs1_data_HE_check;
	rs2_data_HE_check_prev = rs2_data_HE_check;
	rs2_data_HM_check_prev = rs2_data_HM_check;
end

// update expected /o prevs

always @(trigger)
begin
	ForwardAE_check_expected_prev = ForwardAE_check_expected;
	ForwardBE_check_expected_prev = ForwardBE_check_expected;
	alu_data_M_check_expected_prev = alu_data_M_check_expected;
	checker1_expected_prev = checker1_expected;
	checker2_expected_prev = checker2_expected;
	checker3_expected_prev = checker3_expected;
	checker4_expected_prev = checker4_expected;
	ldStall_check_expected_prev = ldStall_check_expected;
	o_insn_vld_expected_prev = o_insn_vld_expected;
	o_io_hex0_expected_prev = o_io_hex0_expected;
	o_io_hex1_expected_prev = o_io_hex1_expected;
	o_io_hex2_expected_prev = o_io_hex2_expected;
	o_io_hex3_expected_prev = o_io_hex3_expected;
	o_io_hex4_expected_prev = o_io_hex4_expected;
	o_io_hex5_expected_prev = o_io_hex5_expected;
	o_io_hex6_expected_prev = o_io_hex6_expected;
	o_io_hex7_expected_prev = o_io_hex7_expected;
	o_io_lcd_expected_prev = o_io_lcd_expected;
	o_io_ledg_expected_prev = o_io_ledg_expected;
	o_io_ledr_expected_prev = o_io_ledr_expected;
	o_pc_debug_expected_prev = o_pc_debug_expected;
	rs1_data_HE_check_expected_prev = rs1_data_HE_check_expected;
	rs2_data_HE_check_expected_prev = rs2_data_HE_check_expected;
	rs2_data_HM_check_expected_prev = rs2_data_HM_check_expected;
end


// expected ForwardAE_check[ 1 ]
initial
begin
	ForwardAE_check_expected[1] = 1'bX;
end 
// expected ForwardAE_check[ 0 ]
initial
begin
	ForwardAE_check_expected[0] = 1'bX;
end 
// expected ForwardBE_check[ 1 ]
initial
begin
	ForwardBE_check_expected[1] = 1'bX;
end 
// expected ForwardBE_check[ 0 ]
initial
begin
	ForwardBE_check_expected[0] = 1'bX;
end 
// expected alu_data_M_check[ 31 ]
initial
begin
	alu_data_M_check_expected[31] = 1'bX;
end 
// expected alu_data_M_check[ 30 ]
initial
begin
	alu_data_M_check_expected[30] = 1'bX;
end 
// expected alu_data_M_check[ 29 ]
initial
begin
	alu_data_M_check_expected[29] = 1'bX;
end 
// expected alu_data_M_check[ 28 ]
initial
begin
	alu_data_M_check_expected[28] = 1'bX;
end 
// expected alu_data_M_check[ 27 ]
initial
begin
	alu_data_M_check_expected[27] = 1'bX;
end 
// expected alu_data_M_check[ 26 ]
initial
begin
	alu_data_M_check_expected[26] = 1'bX;
end 
// expected alu_data_M_check[ 25 ]
initial
begin
	alu_data_M_check_expected[25] = 1'bX;
end 
// expected alu_data_M_check[ 24 ]
initial
begin
	alu_data_M_check_expected[24] = 1'bX;
end 
// expected alu_data_M_check[ 23 ]
initial
begin
	alu_data_M_check_expected[23] = 1'bX;
end 
// expected alu_data_M_check[ 22 ]
initial
begin
	alu_data_M_check_expected[22] = 1'bX;
end 
// expected alu_data_M_check[ 21 ]
initial
begin
	alu_data_M_check_expected[21] = 1'bX;
end 
// expected alu_data_M_check[ 20 ]
initial
begin
	alu_data_M_check_expected[20] = 1'bX;
end 
// expected alu_data_M_check[ 19 ]
initial
begin
	alu_data_M_check_expected[19] = 1'bX;
end 
// expected alu_data_M_check[ 18 ]
initial
begin
	alu_data_M_check_expected[18] = 1'bX;
end 
// expected alu_data_M_check[ 17 ]
initial
begin
	alu_data_M_check_expected[17] = 1'bX;
end 
// expected alu_data_M_check[ 16 ]
initial
begin
	alu_data_M_check_expected[16] = 1'bX;
end 
// expected alu_data_M_check[ 15 ]
initial
begin
	alu_data_M_check_expected[15] = 1'bX;
end 
// expected alu_data_M_check[ 14 ]
initial
begin
	alu_data_M_check_expected[14] = 1'bX;
end 
// expected alu_data_M_check[ 13 ]
initial
begin
	alu_data_M_check_expected[13] = 1'bX;
end 
// expected alu_data_M_check[ 12 ]
initial
begin
	alu_data_M_check_expected[12] = 1'bX;
end 
// expected alu_data_M_check[ 11 ]
initial
begin
	alu_data_M_check_expected[11] = 1'bX;
end 
// expected alu_data_M_check[ 10 ]
initial
begin
	alu_data_M_check_expected[10] = 1'bX;
end 
// expected alu_data_M_check[ 9 ]
initial
begin
	alu_data_M_check_expected[9] = 1'bX;
end 
// expected alu_data_M_check[ 8 ]
initial
begin
	alu_data_M_check_expected[8] = 1'bX;
end 
// expected alu_data_M_check[ 7 ]
initial
begin
	alu_data_M_check_expected[7] = 1'bX;
end 
// expected alu_data_M_check[ 6 ]
initial
begin
	alu_data_M_check_expected[6] = 1'bX;
end 
// expected alu_data_M_check[ 5 ]
initial
begin
	alu_data_M_check_expected[5] = 1'bX;
end 
// expected alu_data_M_check[ 4 ]
initial
begin
	alu_data_M_check_expected[4] = 1'bX;
end 
// expected alu_data_M_check[ 3 ]
initial
begin
	alu_data_M_check_expected[3] = 1'bX;
end 
// expected alu_data_M_check[ 2 ]
initial
begin
	alu_data_M_check_expected[2] = 1'bX;
end 
// expected alu_data_M_check[ 1 ]
initial
begin
	alu_data_M_check_expected[1] = 1'bX;
end 
// expected alu_data_M_check[ 0 ]
initial
begin
	alu_data_M_check_expected[0] = 1'bX;
end 
// expected checker1[ 31 ]
initial
begin
	checker1_expected[31] = 1'bX;
end 
// expected checker1[ 30 ]
initial
begin
	checker1_expected[30] = 1'bX;
end 
// expected checker1[ 29 ]
initial
begin
	checker1_expected[29] = 1'bX;
end 
// expected checker1[ 28 ]
initial
begin
	checker1_expected[28] = 1'bX;
end 
// expected checker1[ 27 ]
initial
begin
	checker1_expected[27] = 1'bX;
end 
// expected checker1[ 26 ]
initial
begin
	checker1_expected[26] = 1'bX;
end 
// expected checker1[ 25 ]
initial
begin
	checker1_expected[25] = 1'bX;
end 
// expected checker1[ 24 ]
initial
begin
	checker1_expected[24] = 1'bX;
end 
// expected checker1[ 23 ]
initial
begin
	checker1_expected[23] = 1'bX;
end 
// expected checker1[ 22 ]
initial
begin
	checker1_expected[22] = 1'bX;
end 
// expected checker1[ 21 ]
initial
begin
	checker1_expected[21] = 1'bX;
end 
// expected checker1[ 20 ]
initial
begin
	checker1_expected[20] = 1'bX;
end 
// expected checker1[ 19 ]
initial
begin
	checker1_expected[19] = 1'bX;
end 
// expected checker1[ 18 ]
initial
begin
	checker1_expected[18] = 1'bX;
end 
// expected checker1[ 17 ]
initial
begin
	checker1_expected[17] = 1'bX;
end 
// expected checker1[ 16 ]
initial
begin
	checker1_expected[16] = 1'bX;
end 
// expected checker1[ 15 ]
initial
begin
	checker1_expected[15] = 1'bX;
end 
// expected checker1[ 14 ]
initial
begin
	checker1_expected[14] = 1'bX;
end 
// expected checker1[ 13 ]
initial
begin
	checker1_expected[13] = 1'bX;
end 
// expected checker1[ 12 ]
initial
begin
	checker1_expected[12] = 1'bX;
end 
// expected checker1[ 11 ]
initial
begin
	checker1_expected[11] = 1'bX;
end 
// expected checker1[ 10 ]
initial
begin
	checker1_expected[10] = 1'bX;
end 
// expected checker1[ 9 ]
initial
begin
	checker1_expected[9] = 1'bX;
end 
// expected checker1[ 8 ]
initial
begin
	checker1_expected[8] = 1'bX;
end 
// expected checker1[ 7 ]
initial
begin
	checker1_expected[7] = 1'bX;
end 
// expected checker1[ 6 ]
initial
begin
	checker1_expected[6] = 1'bX;
end 
// expected checker1[ 5 ]
initial
begin
	checker1_expected[5] = 1'bX;
end 
// expected checker1[ 4 ]
initial
begin
	checker1_expected[4] = 1'bX;
end 
// expected checker1[ 3 ]
initial
begin
	checker1_expected[3] = 1'bX;
end 
// expected checker1[ 2 ]
initial
begin
	checker1_expected[2] = 1'bX;
end 
// expected checker1[ 1 ]
initial
begin
	checker1_expected[1] = 1'bX;
end 
// expected checker1[ 0 ]
initial
begin
	checker1_expected[0] = 1'bX;
end 
// expected checker2[ 31 ]
initial
begin
	checker2_expected[31] = 1'bX;
end 
// expected checker2[ 30 ]
initial
begin
	checker2_expected[30] = 1'bX;
end 
// expected checker2[ 29 ]
initial
begin
	checker2_expected[29] = 1'bX;
end 
// expected checker2[ 28 ]
initial
begin
	checker2_expected[28] = 1'bX;
end 
// expected checker2[ 27 ]
initial
begin
	checker2_expected[27] = 1'bX;
end 
// expected checker2[ 26 ]
initial
begin
	checker2_expected[26] = 1'bX;
end 
// expected checker2[ 25 ]
initial
begin
	checker2_expected[25] = 1'bX;
end 
// expected checker2[ 24 ]
initial
begin
	checker2_expected[24] = 1'bX;
end 
// expected checker2[ 23 ]
initial
begin
	checker2_expected[23] = 1'bX;
end 
// expected checker2[ 22 ]
initial
begin
	checker2_expected[22] = 1'bX;
end 
// expected checker2[ 21 ]
initial
begin
	checker2_expected[21] = 1'bX;
end 
// expected checker2[ 20 ]
initial
begin
	checker2_expected[20] = 1'bX;
end 
// expected checker2[ 19 ]
initial
begin
	checker2_expected[19] = 1'bX;
end 
// expected checker2[ 18 ]
initial
begin
	checker2_expected[18] = 1'bX;
end 
// expected checker2[ 17 ]
initial
begin
	checker2_expected[17] = 1'bX;
end 
// expected checker2[ 16 ]
initial
begin
	checker2_expected[16] = 1'bX;
end 
// expected checker2[ 15 ]
initial
begin
	checker2_expected[15] = 1'bX;
end 
// expected checker2[ 14 ]
initial
begin
	checker2_expected[14] = 1'bX;
end 
// expected checker2[ 13 ]
initial
begin
	checker2_expected[13] = 1'bX;
end 
// expected checker2[ 12 ]
initial
begin
	checker2_expected[12] = 1'bX;
end 
// expected checker2[ 11 ]
initial
begin
	checker2_expected[11] = 1'bX;
end 
// expected checker2[ 10 ]
initial
begin
	checker2_expected[10] = 1'bX;
end 
// expected checker2[ 9 ]
initial
begin
	checker2_expected[9] = 1'bX;
end 
// expected checker2[ 8 ]
initial
begin
	checker2_expected[8] = 1'bX;
end 
// expected checker2[ 7 ]
initial
begin
	checker2_expected[7] = 1'bX;
end 
// expected checker2[ 6 ]
initial
begin
	checker2_expected[6] = 1'bX;
end 
// expected checker2[ 5 ]
initial
begin
	checker2_expected[5] = 1'bX;
end 
// expected checker2[ 4 ]
initial
begin
	checker2_expected[4] = 1'bX;
end 
// expected checker2[ 3 ]
initial
begin
	checker2_expected[3] = 1'bX;
end 
// expected checker2[ 2 ]
initial
begin
	checker2_expected[2] = 1'bX;
end 
// expected checker2[ 1 ]
initial
begin
	checker2_expected[1] = 1'bX;
end 
// expected checker2[ 0 ]
initial
begin
	checker2_expected[0] = 1'bX;
end 
// expected checker3[ 31 ]
initial
begin
	checker3_expected[31] = 1'bX;
end 
// expected checker3[ 30 ]
initial
begin
	checker3_expected[30] = 1'bX;
end 
// expected checker3[ 29 ]
initial
begin
	checker3_expected[29] = 1'bX;
end 
// expected checker3[ 28 ]
initial
begin
	checker3_expected[28] = 1'bX;
end 
// expected checker3[ 27 ]
initial
begin
	checker3_expected[27] = 1'bX;
end 
// expected checker3[ 26 ]
initial
begin
	checker3_expected[26] = 1'bX;
end 
// expected checker3[ 25 ]
initial
begin
	checker3_expected[25] = 1'bX;
end 
// expected checker3[ 24 ]
initial
begin
	checker3_expected[24] = 1'bX;
end 
// expected checker3[ 23 ]
initial
begin
	checker3_expected[23] = 1'bX;
end 
// expected checker3[ 22 ]
initial
begin
	checker3_expected[22] = 1'bX;
end 
// expected checker3[ 21 ]
initial
begin
	checker3_expected[21] = 1'bX;
end 
// expected checker3[ 20 ]
initial
begin
	checker3_expected[20] = 1'bX;
end 
// expected checker3[ 19 ]
initial
begin
	checker3_expected[19] = 1'bX;
end 
// expected checker3[ 18 ]
initial
begin
	checker3_expected[18] = 1'bX;
end 
// expected checker3[ 17 ]
initial
begin
	checker3_expected[17] = 1'bX;
end 
// expected checker3[ 16 ]
initial
begin
	checker3_expected[16] = 1'bX;
end 
// expected checker3[ 15 ]
initial
begin
	checker3_expected[15] = 1'bX;
end 
// expected checker3[ 14 ]
initial
begin
	checker3_expected[14] = 1'bX;
end 
// expected checker3[ 13 ]
initial
begin
	checker3_expected[13] = 1'bX;
end 
// expected checker3[ 12 ]
initial
begin
	checker3_expected[12] = 1'bX;
end 
// expected checker3[ 11 ]
initial
begin
	checker3_expected[11] = 1'bX;
end 
// expected checker3[ 10 ]
initial
begin
	checker3_expected[10] = 1'bX;
end 
// expected checker3[ 9 ]
initial
begin
	checker3_expected[9] = 1'bX;
end 
// expected checker3[ 8 ]
initial
begin
	checker3_expected[8] = 1'bX;
end 
// expected checker3[ 7 ]
initial
begin
	checker3_expected[7] = 1'bX;
end 
// expected checker3[ 6 ]
initial
begin
	checker3_expected[6] = 1'bX;
end 
// expected checker3[ 5 ]
initial
begin
	checker3_expected[5] = 1'bX;
end 
// expected checker3[ 4 ]
initial
begin
	checker3_expected[4] = 1'bX;
end 
// expected checker3[ 3 ]
initial
begin
	checker3_expected[3] = 1'bX;
end 
// expected checker3[ 2 ]
initial
begin
	checker3_expected[2] = 1'bX;
end 
// expected checker3[ 1 ]
initial
begin
	checker3_expected[1] = 1'bX;
end 
// expected checker3[ 0 ]
initial
begin
	checker3_expected[0] = 1'bX;
end 
// expected checker4[ 31 ]
initial
begin
	checker4_expected[31] = 1'bX;
end 
// expected checker4[ 30 ]
initial
begin
	checker4_expected[30] = 1'bX;
end 
// expected checker4[ 29 ]
initial
begin
	checker4_expected[29] = 1'bX;
end 
// expected checker4[ 28 ]
initial
begin
	checker4_expected[28] = 1'bX;
end 
// expected checker4[ 27 ]
initial
begin
	checker4_expected[27] = 1'bX;
end 
// expected checker4[ 26 ]
initial
begin
	checker4_expected[26] = 1'bX;
end 
// expected checker4[ 25 ]
initial
begin
	checker4_expected[25] = 1'bX;
end 
// expected checker4[ 24 ]
initial
begin
	checker4_expected[24] = 1'bX;
end 
// expected checker4[ 23 ]
initial
begin
	checker4_expected[23] = 1'bX;
end 
// expected checker4[ 22 ]
initial
begin
	checker4_expected[22] = 1'bX;
end 
// expected checker4[ 21 ]
initial
begin
	checker4_expected[21] = 1'bX;
end 
// expected checker4[ 20 ]
initial
begin
	checker4_expected[20] = 1'bX;
end 
// expected checker4[ 19 ]
initial
begin
	checker4_expected[19] = 1'bX;
end 
// expected checker4[ 18 ]
initial
begin
	checker4_expected[18] = 1'bX;
end 
// expected checker4[ 17 ]
initial
begin
	checker4_expected[17] = 1'bX;
end 
// expected checker4[ 16 ]
initial
begin
	checker4_expected[16] = 1'bX;
end 
// expected checker4[ 15 ]
initial
begin
	checker4_expected[15] = 1'bX;
end 
// expected checker4[ 14 ]
initial
begin
	checker4_expected[14] = 1'bX;
end 
// expected checker4[ 13 ]
initial
begin
	checker4_expected[13] = 1'bX;
end 
// expected checker4[ 12 ]
initial
begin
	checker4_expected[12] = 1'bX;
end 
// expected checker4[ 11 ]
initial
begin
	checker4_expected[11] = 1'bX;
end 
// expected checker4[ 10 ]
initial
begin
	checker4_expected[10] = 1'bX;
end 
// expected checker4[ 9 ]
initial
begin
	checker4_expected[9] = 1'bX;
end 
// expected checker4[ 8 ]
initial
begin
	checker4_expected[8] = 1'bX;
end 
// expected checker4[ 7 ]
initial
begin
	checker4_expected[7] = 1'bX;
end 
// expected checker4[ 6 ]
initial
begin
	checker4_expected[6] = 1'bX;
end 
// expected checker4[ 5 ]
initial
begin
	checker4_expected[5] = 1'bX;
end 
// expected checker4[ 4 ]
initial
begin
	checker4_expected[4] = 1'bX;
end 
// expected checker4[ 3 ]
initial
begin
	checker4_expected[3] = 1'bX;
end 
// expected checker4[ 2 ]
initial
begin
	checker4_expected[2] = 1'bX;
end 
// expected checker4[ 1 ]
initial
begin
	checker4_expected[1] = 1'bX;
end 
// expected checker4[ 0 ]
initial
begin
	checker4_expected[0] = 1'bX;
end 

// expected ldStall_check
initial
begin
	ldStall_check_expected = 1'bX;
end 

// expected o_insn_vld
initial
begin
	o_insn_vld_expected = 1'bX;
end 
// expected o_io_hex0[ 6 ]
initial
begin
	o_io_hex0_expected[6] = 1'bX;
end 
// expected o_io_hex0[ 5 ]
initial
begin
	o_io_hex0_expected[5] = 1'bX;
end 
// expected o_io_hex0[ 4 ]
initial
begin
	o_io_hex0_expected[4] = 1'bX;
end 
// expected o_io_hex0[ 3 ]
initial
begin
	o_io_hex0_expected[3] = 1'bX;
end 
// expected o_io_hex0[ 2 ]
initial
begin
	o_io_hex0_expected[2] = 1'bX;
end 
// expected o_io_hex0[ 1 ]
initial
begin
	o_io_hex0_expected[1] = 1'bX;
end 
// expected o_io_hex0[ 0 ]
initial
begin
	o_io_hex0_expected[0] = 1'bX;
end 
// expected o_io_hex1[ 6 ]
initial
begin
	o_io_hex1_expected[6] = 1'bX;
end 
// expected o_io_hex1[ 5 ]
initial
begin
	o_io_hex1_expected[5] = 1'bX;
end 
// expected o_io_hex1[ 4 ]
initial
begin
	o_io_hex1_expected[4] = 1'bX;
end 
// expected o_io_hex1[ 3 ]
initial
begin
	o_io_hex1_expected[3] = 1'bX;
end 
// expected o_io_hex1[ 2 ]
initial
begin
	o_io_hex1_expected[2] = 1'bX;
end 
// expected o_io_hex1[ 1 ]
initial
begin
	o_io_hex1_expected[1] = 1'bX;
end 
// expected o_io_hex1[ 0 ]
initial
begin
	o_io_hex1_expected[0] = 1'bX;
end 
// expected o_io_hex2[ 6 ]
initial
begin
	o_io_hex2_expected[6] = 1'bX;
end 
// expected o_io_hex2[ 5 ]
initial
begin
	o_io_hex2_expected[5] = 1'bX;
end 
// expected o_io_hex2[ 4 ]
initial
begin
	o_io_hex2_expected[4] = 1'bX;
end 
// expected o_io_hex2[ 3 ]
initial
begin
	o_io_hex2_expected[3] = 1'bX;
end 
// expected o_io_hex2[ 2 ]
initial
begin
	o_io_hex2_expected[2] = 1'bX;
end 
// expected o_io_hex2[ 1 ]
initial
begin
	o_io_hex2_expected[1] = 1'bX;
end 
// expected o_io_hex2[ 0 ]
initial
begin
	o_io_hex2_expected[0] = 1'bX;
end 
// expected o_io_hex3[ 6 ]
initial
begin
	o_io_hex3_expected[6] = 1'bX;
end 
// expected o_io_hex3[ 5 ]
initial
begin
	o_io_hex3_expected[5] = 1'bX;
end 
// expected o_io_hex3[ 4 ]
initial
begin
	o_io_hex3_expected[4] = 1'bX;
end 
// expected o_io_hex3[ 3 ]
initial
begin
	o_io_hex3_expected[3] = 1'bX;
end 
// expected o_io_hex3[ 2 ]
initial
begin
	o_io_hex3_expected[2] = 1'bX;
end 
// expected o_io_hex3[ 1 ]
initial
begin
	o_io_hex3_expected[1] = 1'bX;
end 
// expected o_io_hex3[ 0 ]
initial
begin
	o_io_hex3_expected[0] = 1'bX;
end 
// expected o_io_hex4[ 6 ]
initial
begin
	o_io_hex4_expected[6] = 1'bX;
end 
// expected o_io_hex4[ 5 ]
initial
begin
	o_io_hex4_expected[5] = 1'bX;
end 
// expected o_io_hex4[ 4 ]
initial
begin
	o_io_hex4_expected[4] = 1'bX;
end 
// expected o_io_hex4[ 3 ]
initial
begin
	o_io_hex4_expected[3] = 1'bX;
end 
// expected o_io_hex4[ 2 ]
initial
begin
	o_io_hex4_expected[2] = 1'bX;
end 
// expected o_io_hex4[ 1 ]
initial
begin
	o_io_hex4_expected[1] = 1'bX;
end 
// expected o_io_hex4[ 0 ]
initial
begin
	o_io_hex4_expected[0] = 1'bX;
end 
// expected o_io_hex5[ 6 ]
initial
begin
	o_io_hex5_expected[6] = 1'bX;
end 
// expected o_io_hex5[ 5 ]
initial
begin
	o_io_hex5_expected[5] = 1'bX;
end 
// expected o_io_hex5[ 4 ]
initial
begin
	o_io_hex5_expected[4] = 1'bX;
end 
// expected o_io_hex5[ 3 ]
initial
begin
	o_io_hex5_expected[3] = 1'bX;
end 
// expected o_io_hex5[ 2 ]
initial
begin
	o_io_hex5_expected[2] = 1'bX;
end 
// expected o_io_hex5[ 1 ]
initial
begin
	o_io_hex5_expected[1] = 1'bX;
end 
// expected o_io_hex5[ 0 ]
initial
begin
	o_io_hex5_expected[0] = 1'bX;
end 
// expected o_io_hex6[ 6 ]
initial
begin
	o_io_hex6_expected[6] = 1'bX;
end 
// expected o_io_hex6[ 5 ]
initial
begin
	o_io_hex6_expected[5] = 1'bX;
end 
// expected o_io_hex6[ 4 ]
initial
begin
	o_io_hex6_expected[4] = 1'bX;
end 
// expected o_io_hex6[ 3 ]
initial
begin
	o_io_hex6_expected[3] = 1'bX;
end 
// expected o_io_hex6[ 2 ]
initial
begin
	o_io_hex6_expected[2] = 1'bX;
end 
// expected o_io_hex6[ 1 ]
initial
begin
	o_io_hex6_expected[1] = 1'bX;
end 
// expected o_io_hex6[ 0 ]
initial
begin
	o_io_hex6_expected[0] = 1'bX;
end 
// expected o_io_hex7[ 6 ]
initial
begin
	o_io_hex7_expected[6] = 1'bX;
end 
// expected o_io_hex7[ 5 ]
initial
begin
	o_io_hex7_expected[5] = 1'bX;
end 
// expected o_io_hex7[ 4 ]
initial
begin
	o_io_hex7_expected[4] = 1'bX;
end 
// expected o_io_hex7[ 3 ]
initial
begin
	o_io_hex7_expected[3] = 1'bX;
end 
// expected o_io_hex7[ 2 ]
initial
begin
	o_io_hex7_expected[2] = 1'bX;
end 
// expected o_io_hex7[ 1 ]
initial
begin
	o_io_hex7_expected[1] = 1'bX;
end 
// expected o_io_hex7[ 0 ]
initial
begin
	o_io_hex7_expected[0] = 1'bX;
end 
// expected o_io_lcd[ 31 ]
initial
begin
	o_io_lcd_expected[31] = 1'bX;
end 
// expected o_io_lcd[ 30 ]
initial
begin
	o_io_lcd_expected[30] = 1'bX;
end 
// expected o_io_lcd[ 29 ]
initial
begin
	o_io_lcd_expected[29] = 1'bX;
end 
// expected o_io_lcd[ 28 ]
initial
begin
	o_io_lcd_expected[28] = 1'bX;
end 
// expected o_io_lcd[ 27 ]
initial
begin
	o_io_lcd_expected[27] = 1'bX;
end 
// expected o_io_lcd[ 26 ]
initial
begin
	o_io_lcd_expected[26] = 1'bX;
end 
// expected o_io_lcd[ 25 ]
initial
begin
	o_io_lcd_expected[25] = 1'bX;
end 
// expected o_io_lcd[ 24 ]
initial
begin
	o_io_lcd_expected[24] = 1'bX;
end 
// expected o_io_lcd[ 23 ]
initial
begin
	o_io_lcd_expected[23] = 1'bX;
end 
// expected o_io_lcd[ 22 ]
initial
begin
	o_io_lcd_expected[22] = 1'bX;
end 
// expected o_io_lcd[ 21 ]
initial
begin
	o_io_lcd_expected[21] = 1'bX;
end 
// expected o_io_lcd[ 20 ]
initial
begin
	o_io_lcd_expected[20] = 1'bX;
end 
// expected o_io_lcd[ 19 ]
initial
begin
	o_io_lcd_expected[19] = 1'bX;
end 
// expected o_io_lcd[ 18 ]
initial
begin
	o_io_lcd_expected[18] = 1'bX;
end 
// expected o_io_lcd[ 17 ]
initial
begin
	o_io_lcd_expected[17] = 1'bX;
end 
// expected o_io_lcd[ 16 ]
initial
begin
	o_io_lcd_expected[16] = 1'bX;
end 
// expected o_io_lcd[ 15 ]
initial
begin
	o_io_lcd_expected[15] = 1'bX;
end 
// expected o_io_lcd[ 14 ]
initial
begin
	o_io_lcd_expected[14] = 1'bX;
end 
// expected o_io_lcd[ 13 ]
initial
begin
	o_io_lcd_expected[13] = 1'bX;
end 
// expected o_io_lcd[ 12 ]
initial
begin
	o_io_lcd_expected[12] = 1'bX;
end 
// expected o_io_lcd[ 11 ]
initial
begin
	o_io_lcd_expected[11] = 1'bX;
end 
// expected o_io_lcd[ 10 ]
initial
begin
	o_io_lcd_expected[10] = 1'bX;
end 
// expected o_io_lcd[ 9 ]
initial
begin
	o_io_lcd_expected[9] = 1'bX;
end 
// expected o_io_lcd[ 8 ]
initial
begin
	o_io_lcd_expected[8] = 1'bX;
end 
// expected o_io_lcd[ 7 ]
initial
begin
	o_io_lcd_expected[7] = 1'bX;
end 
// expected o_io_lcd[ 6 ]
initial
begin
	o_io_lcd_expected[6] = 1'bX;
end 
// expected o_io_lcd[ 5 ]
initial
begin
	o_io_lcd_expected[5] = 1'bX;
end 
// expected o_io_lcd[ 4 ]
initial
begin
	o_io_lcd_expected[4] = 1'bX;
end 
// expected o_io_lcd[ 3 ]
initial
begin
	o_io_lcd_expected[3] = 1'bX;
end 
// expected o_io_lcd[ 2 ]
initial
begin
	o_io_lcd_expected[2] = 1'bX;
end 
// expected o_io_lcd[ 1 ]
initial
begin
	o_io_lcd_expected[1] = 1'bX;
end 
// expected o_io_lcd[ 0 ]
initial
begin
	o_io_lcd_expected[0] = 1'bX;
end 
// expected o_io_ledg[ 31 ]
initial
begin
	o_io_ledg_expected[31] = 1'bX;
end 
// expected o_io_ledg[ 30 ]
initial
begin
	o_io_ledg_expected[30] = 1'bX;
end 
// expected o_io_ledg[ 29 ]
initial
begin
	o_io_ledg_expected[29] = 1'bX;
end 
// expected o_io_ledg[ 28 ]
initial
begin
	o_io_ledg_expected[28] = 1'bX;
end 
// expected o_io_ledg[ 27 ]
initial
begin
	o_io_ledg_expected[27] = 1'bX;
end 
// expected o_io_ledg[ 26 ]
initial
begin
	o_io_ledg_expected[26] = 1'bX;
end 
// expected o_io_ledg[ 25 ]
initial
begin
	o_io_ledg_expected[25] = 1'bX;
end 
// expected o_io_ledg[ 24 ]
initial
begin
	o_io_ledg_expected[24] = 1'bX;
end 
// expected o_io_ledg[ 23 ]
initial
begin
	o_io_ledg_expected[23] = 1'bX;
end 
// expected o_io_ledg[ 22 ]
initial
begin
	o_io_ledg_expected[22] = 1'bX;
end 
// expected o_io_ledg[ 21 ]
initial
begin
	o_io_ledg_expected[21] = 1'bX;
end 
// expected o_io_ledg[ 20 ]
initial
begin
	o_io_ledg_expected[20] = 1'bX;
end 
// expected o_io_ledg[ 19 ]
initial
begin
	o_io_ledg_expected[19] = 1'bX;
end 
// expected o_io_ledg[ 18 ]
initial
begin
	o_io_ledg_expected[18] = 1'bX;
end 
// expected o_io_ledg[ 17 ]
initial
begin
	o_io_ledg_expected[17] = 1'bX;
end 
// expected o_io_ledg[ 16 ]
initial
begin
	o_io_ledg_expected[16] = 1'bX;
end 
// expected o_io_ledg[ 15 ]
initial
begin
	o_io_ledg_expected[15] = 1'bX;
end 
// expected o_io_ledg[ 14 ]
initial
begin
	o_io_ledg_expected[14] = 1'bX;
end 
// expected o_io_ledg[ 13 ]
initial
begin
	o_io_ledg_expected[13] = 1'bX;
end 
// expected o_io_ledg[ 12 ]
initial
begin
	o_io_ledg_expected[12] = 1'bX;
end 
// expected o_io_ledg[ 11 ]
initial
begin
	o_io_ledg_expected[11] = 1'bX;
end 
// expected o_io_ledg[ 10 ]
initial
begin
	o_io_ledg_expected[10] = 1'bX;
end 
// expected o_io_ledg[ 9 ]
initial
begin
	o_io_ledg_expected[9] = 1'bX;
end 
// expected o_io_ledg[ 8 ]
initial
begin
	o_io_ledg_expected[8] = 1'bX;
end 
// expected o_io_ledg[ 7 ]
initial
begin
	o_io_ledg_expected[7] = 1'bX;
end 
// expected o_io_ledg[ 6 ]
initial
begin
	o_io_ledg_expected[6] = 1'bX;
end 
// expected o_io_ledg[ 5 ]
initial
begin
	o_io_ledg_expected[5] = 1'bX;
end 
// expected o_io_ledg[ 4 ]
initial
begin
	o_io_ledg_expected[4] = 1'bX;
end 
// expected o_io_ledg[ 3 ]
initial
begin
	o_io_ledg_expected[3] = 1'bX;
end 
// expected o_io_ledg[ 2 ]
initial
begin
	o_io_ledg_expected[2] = 1'bX;
end 
// expected o_io_ledg[ 1 ]
initial
begin
	o_io_ledg_expected[1] = 1'bX;
end 
// expected o_io_ledg[ 0 ]
initial
begin
	o_io_ledg_expected[0] = 1'bX;
end 
// expected o_io_ledr[ 31 ]
initial
begin
	o_io_ledr_expected[31] = 1'bX;
end 
// expected o_io_ledr[ 30 ]
initial
begin
	o_io_ledr_expected[30] = 1'bX;
end 
// expected o_io_ledr[ 29 ]
initial
begin
	o_io_ledr_expected[29] = 1'bX;
end 
// expected o_io_ledr[ 28 ]
initial
begin
	o_io_ledr_expected[28] = 1'bX;
end 
// expected o_io_ledr[ 27 ]
initial
begin
	o_io_ledr_expected[27] = 1'bX;
end 
// expected o_io_ledr[ 26 ]
initial
begin
	o_io_ledr_expected[26] = 1'bX;
end 
// expected o_io_ledr[ 25 ]
initial
begin
	o_io_ledr_expected[25] = 1'bX;
end 
// expected o_io_ledr[ 24 ]
initial
begin
	o_io_ledr_expected[24] = 1'bX;
end 
// expected o_io_ledr[ 23 ]
initial
begin
	o_io_ledr_expected[23] = 1'bX;
end 
// expected o_io_ledr[ 22 ]
initial
begin
	o_io_ledr_expected[22] = 1'bX;
end 
// expected o_io_ledr[ 21 ]
initial
begin
	o_io_ledr_expected[21] = 1'bX;
end 
// expected o_io_ledr[ 20 ]
initial
begin
	o_io_ledr_expected[20] = 1'bX;
end 
// expected o_io_ledr[ 19 ]
initial
begin
	o_io_ledr_expected[19] = 1'bX;
end 
// expected o_io_ledr[ 18 ]
initial
begin
	o_io_ledr_expected[18] = 1'bX;
end 
// expected o_io_ledr[ 17 ]
initial
begin
	o_io_ledr_expected[17] = 1'bX;
end 
// expected o_io_ledr[ 16 ]
initial
begin
	o_io_ledr_expected[16] = 1'bX;
end 
// expected o_io_ledr[ 15 ]
initial
begin
	o_io_ledr_expected[15] = 1'bX;
end 
// expected o_io_ledr[ 14 ]
initial
begin
	o_io_ledr_expected[14] = 1'bX;
end 
// expected o_io_ledr[ 13 ]
initial
begin
	o_io_ledr_expected[13] = 1'bX;
end 
// expected o_io_ledr[ 12 ]
initial
begin
	o_io_ledr_expected[12] = 1'bX;
end 
// expected o_io_ledr[ 11 ]
initial
begin
	o_io_ledr_expected[11] = 1'bX;
end 
// expected o_io_ledr[ 10 ]
initial
begin
	o_io_ledr_expected[10] = 1'bX;
end 
// expected o_io_ledr[ 9 ]
initial
begin
	o_io_ledr_expected[9] = 1'bX;
end 
// expected o_io_ledr[ 8 ]
initial
begin
	o_io_ledr_expected[8] = 1'bX;
end 
// expected o_io_ledr[ 7 ]
initial
begin
	o_io_ledr_expected[7] = 1'bX;
end 
// expected o_io_ledr[ 6 ]
initial
begin
	o_io_ledr_expected[6] = 1'bX;
end 
// expected o_io_ledr[ 5 ]
initial
begin
	o_io_ledr_expected[5] = 1'bX;
end 
// expected o_io_ledr[ 4 ]
initial
begin
	o_io_ledr_expected[4] = 1'bX;
end 
// expected o_io_ledr[ 3 ]
initial
begin
	o_io_ledr_expected[3] = 1'bX;
end 
// expected o_io_ledr[ 2 ]
initial
begin
	o_io_ledr_expected[2] = 1'bX;
end 
// expected o_io_ledr[ 1 ]
initial
begin
	o_io_ledr_expected[1] = 1'bX;
end 
// expected o_io_ledr[ 0 ]
initial
begin
	o_io_ledr_expected[0] = 1'bX;
end 
// expected o_pc_debug[ 31 ]
initial
begin
	o_pc_debug_expected[31] = 1'bX;
end 
// expected o_pc_debug[ 30 ]
initial
begin
	o_pc_debug_expected[30] = 1'bX;
end 
// expected o_pc_debug[ 29 ]
initial
begin
	o_pc_debug_expected[29] = 1'bX;
end 
// expected o_pc_debug[ 28 ]
initial
begin
	o_pc_debug_expected[28] = 1'bX;
end 
// expected o_pc_debug[ 27 ]
initial
begin
	o_pc_debug_expected[27] = 1'bX;
end 
// expected o_pc_debug[ 26 ]
initial
begin
	o_pc_debug_expected[26] = 1'bX;
end 
// expected o_pc_debug[ 25 ]
initial
begin
	o_pc_debug_expected[25] = 1'bX;
end 
// expected o_pc_debug[ 24 ]
initial
begin
	o_pc_debug_expected[24] = 1'bX;
end 
// expected o_pc_debug[ 23 ]
initial
begin
	o_pc_debug_expected[23] = 1'bX;
end 
// expected o_pc_debug[ 22 ]
initial
begin
	o_pc_debug_expected[22] = 1'bX;
end 
// expected o_pc_debug[ 21 ]
initial
begin
	o_pc_debug_expected[21] = 1'bX;
end 
// expected o_pc_debug[ 20 ]
initial
begin
	o_pc_debug_expected[20] = 1'bX;
end 
// expected o_pc_debug[ 19 ]
initial
begin
	o_pc_debug_expected[19] = 1'bX;
end 
// expected o_pc_debug[ 18 ]
initial
begin
	o_pc_debug_expected[18] = 1'bX;
end 
// expected o_pc_debug[ 17 ]
initial
begin
	o_pc_debug_expected[17] = 1'bX;
end 
// expected o_pc_debug[ 16 ]
initial
begin
	o_pc_debug_expected[16] = 1'bX;
end 
// expected o_pc_debug[ 15 ]
initial
begin
	o_pc_debug_expected[15] = 1'bX;
end 
// expected o_pc_debug[ 14 ]
initial
begin
	o_pc_debug_expected[14] = 1'bX;
end 
// expected o_pc_debug[ 13 ]
initial
begin
	o_pc_debug_expected[13] = 1'bX;
end 
// expected o_pc_debug[ 12 ]
initial
begin
	o_pc_debug_expected[12] = 1'bX;
end 
// expected o_pc_debug[ 11 ]
initial
begin
	o_pc_debug_expected[11] = 1'bX;
end 
// expected o_pc_debug[ 10 ]
initial
begin
	o_pc_debug_expected[10] = 1'bX;
end 
// expected o_pc_debug[ 9 ]
initial
begin
	o_pc_debug_expected[9] = 1'bX;
end 
// expected o_pc_debug[ 8 ]
initial
begin
	o_pc_debug_expected[8] = 1'bX;
end 
// expected o_pc_debug[ 7 ]
initial
begin
	o_pc_debug_expected[7] = 1'bX;
end 
// expected o_pc_debug[ 6 ]
initial
begin
	o_pc_debug_expected[6] = 1'bX;
end 
// expected o_pc_debug[ 5 ]
initial
begin
	o_pc_debug_expected[5] = 1'bX;
end 
// expected o_pc_debug[ 4 ]
initial
begin
	o_pc_debug_expected[4] = 1'bX;
end 
// expected o_pc_debug[ 3 ]
initial
begin
	o_pc_debug_expected[3] = 1'bX;
end 
// expected o_pc_debug[ 2 ]
initial
begin
	o_pc_debug_expected[2] = 1'bX;
end 
// expected o_pc_debug[ 1 ]
initial
begin
	o_pc_debug_expected[1] = 1'bX;
end 
// expected o_pc_debug[ 0 ]
initial
begin
	o_pc_debug_expected[0] = 1'bX;
end 
// expected rs1_data_HE_check[ 31 ]
initial
begin
	rs1_data_HE_check_expected[31] = 1'bX;
end 
// expected rs1_data_HE_check[ 30 ]
initial
begin
	rs1_data_HE_check_expected[30] = 1'bX;
end 
// expected rs1_data_HE_check[ 29 ]
initial
begin
	rs1_data_HE_check_expected[29] = 1'bX;
end 
// expected rs1_data_HE_check[ 28 ]
initial
begin
	rs1_data_HE_check_expected[28] = 1'bX;
end 
// expected rs1_data_HE_check[ 27 ]
initial
begin
	rs1_data_HE_check_expected[27] = 1'bX;
end 
// expected rs1_data_HE_check[ 26 ]
initial
begin
	rs1_data_HE_check_expected[26] = 1'bX;
end 
// expected rs1_data_HE_check[ 25 ]
initial
begin
	rs1_data_HE_check_expected[25] = 1'bX;
end 
// expected rs1_data_HE_check[ 24 ]
initial
begin
	rs1_data_HE_check_expected[24] = 1'bX;
end 
// expected rs1_data_HE_check[ 23 ]
initial
begin
	rs1_data_HE_check_expected[23] = 1'bX;
end 
// expected rs1_data_HE_check[ 22 ]
initial
begin
	rs1_data_HE_check_expected[22] = 1'bX;
end 
// expected rs1_data_HE_check[ 21 ]
initial
begin
	rs1_data_HE_check_expected[21] = 1'bX;
end 
// expected rs1_data_HE_check[ 20 ]
initial
begin
	rs1_data_HE_check_expected[20] = 1'bX;
end 
// expected rs1_data_HE_check[ 19 ]
initial
begin
	rs1_data_HE_check_expected[19] = 1'bX;
end 
// expected rs1_data_HE_check[ 18 ]
initial
begin
	rs1_data_HE_check_expected[18] = 1'bX;
end 
// expected rs1_data_HE_check[ 17 ]
initial
begin
	rs1_data_HE_check_expected[17] = 1'bX;
end 
// expected rs1_data_HE_check[ 16 ]
initial
begin
	rs1_data_HE_check_expected[16] = 1'bX;
end 
// expected rs1_data_HE_check[ 15 ]
initial
begin
	rs1_data_HE_check_expected[15] = 1'bX;
end 
// expected rs1_data_HE_check[ 14 ]
initial
begin
	rs1_data_HE_check_expected[14] = 1'bX;
end 
// expected rs1_data_HE_check[ 13 ]
initial
begin
	rs1_data_HE_check_expected[13] = 1'bX;
end 
// expected rs1_data_HE_check[ 12 ]
initial
begin
	rs1_data_HE_check_expected[12] = 1'bX;
end 
// expected rs1_data_HE_check[ 11 ]
initial
begin
	rs1_data_HE_check_expected[11] = 1'bX;
end 
// expected rs1_data_HE_check[ 10 ]
initial
begin
	rs1_data_HE_check_expected[10] = 1'bX;
end 
// expected rs1_data_HE_check[ 9 ]
initial
begin
	rs1_data_HE_check_expected[9] = 1'bX;
end 
// expected rs1_data_HE_check[ 8 ]
initial
begin
	rs1_data_HE_check_expected[8] = 1'bX;
end 
// expected rs1_data_HE_check[ 7 ]
initial
begin
	rs1_data_HE_check_expected[7] = 1'bX;
end 
// expected rs1_data_HE_check[ 6 ]
initial
begin
	rs1_data_HE_check_expected[6] = 1'bX;
end 
// expected rs1_data_HE_check[ 5 ]
initial
begin
	rs1_data_HE_check_expected[5] = 1'bX;
end 
// expected rs1_data_HE_check[ 4 ]
initial
begin
	rs1_data_HE_check_expected[4] = 1'bX;
end 
// expected rs1_data_HE_check[ 3 ]
initial
begin
	rs1_data_HE_check_expected[3] = 1'bX;
end 
// expected rs1_data_HE_check[ 2 ]
initial
begin
	rs1_data_HE_check_expected[2] = 1'bX;
end 
// expected rs1_data_HE_check[ 1 ]
initial
begin
	rs1_data_HE_check_expected[1] = 1'bX;
end 
// expected rs1_data_HE_check[ 0 ]
initial
begin
	rs1_data_HE_check_expected[0] = 1'bX;
end 
// expected rs2_data_HE_check[ 31 ]
initial
begin
	rs2_data_HE_check_expected[31] = 1'bX;
end 
// expected rs2_data_HE_check[ 30 ]
initial
begin
	rs2_data_HE_check_expected[30] = 1'bX;
end 
// expected rs2_data_HE_check[ 29 ]
initial
begin
	rs2_data_HE_check_expected[29] = 1'bX;
end 
// expected rs2_data_HE_check[ 28 ]
initial
begin
	rs2_data_HE_check_expected[28] = 1'bX;
end 
// expected rs2_data_HE_check[ 27 ]
initial
begin
	rs2_data_HE_check_expected[27] = 1'bX;
end 
// expected rs2_data_HE_check[ 26 ]
initial
begin
	rs2_data_HE_check_expected[26] = 1'bX;
end 
// expected rs2_data_HE_check[ 25 ]
initial
begin
	rs2_data_HE_check_expected[25] = 1'bX;
end 
// expected rs2_data_HE_check[ 24 ]
initial
begin
	rs2_data_HE_check_expected[24] = 1'bX;
end 
// expected rs2_data_HE_check[ 23 ]
initial
begin
	rs2_data_HE_check_expected[23] = 1'bX;
end 
// expected rs2_data_HE_check[ 22 ]
initial
begin
	rs2_data_HE_check_expected[22] = 1'bX;
end 
// expected rs2_data_HE_check[ 21 ]
initial
begin
	rs2_data_HE_check_expected[21] = 1'bX;
end 
// expected rs2_data_HE_check[ 20 ]
initial
begin
	rs2_data_HE_check_expected[20] = 1'bX;
end 
// expected rs2_data_HE_check[ 19 ]
initial
begin
	rs2_data_HE_check_expected[19] = 1'bX;
end 
// expected rs2_data_HE_check[ 18 ]
initial
begin
	rs2_data_HE_check_expected[18] = 1'bX;
end 
// expected rs2_data_HE_check[ 17 ]
initial
begin
	rs2_data_HE_check_expected[17] = 1'bX;
end 
// expected rs2_data_HE_check[ 16 ]
initial
begin
	rs2_data_HE_check_expected[16] = 1'bX;
end 
// expected rs2_data_HE_check[ 15 ]
initial
begin
	rs2_data_HE_check_expected[15] = 1'bX;
end 
// expected rs2_data_HE_check[ 14 ]
initial
begin
	rs2_data_HE_check_expected[14] = 1'bX;
end 
// expected rs2_data_HE_check[ 13 ]
initial
begin
	rs2_data_HE_check_expected[13] = 1'bX;
end 
// expected rs2_data_HE_check[ 12 ]
initial
begin
	rs2_data_HE_check_expected[12] = 1'bX;
end 
// expected rs2_data_HE_check[ 11 ]
initial
begin
	rs2_data_HE_check_expected[11] = 1'bX;
end 
// expected rs2_data_HE_check[ 10 ]
initial
begin
	rs2_data_HE_check_expected[10] = 1'bX;
end 
// expected rs2_data_HE_check[ 9 ]
initial
begin
	rs2_data_HE_check_expected[9] = 1'bX;
end 
// expected rs2_data_HE_check[ 8 ]
initial
begin
	rs2_data_HE_check_expected[8] = 1'bX;
end 
// expected rs2_data_HE_check[ 7 ]
initial
begin
	rs2_data_HE_check_expected[7] = 1'bX;
end 
// expected rs2_data_HE_check[ 6 ]
initial
begin
	rs2_data_HE_check_expected[6] = 1'bX;
end 
// expected rs2_data_HE_check[ 5 ]
initial
begin
	rs2_data_HE_check_expected[5] = 1'bX;
end 
// expected rs2_data_HE_check[ 4 ]
initial
begin
	rs2_data_HE_check_expected[4] = 1'bX;
end 
// expected rs2_data_HE_check[ 3 ]
initial
begin
	rs2_data_HE_check_expected[3] = 1'bX;
end 
// expected rs2_data_HE_check[ 2 ]
initial
begin
	rs2_data_HE_check_expected[2] = 1'bX;
end 
// expected rs2_data_HE_check[ 1 ]
initial
begin
	rs2_data_HE_check_expected[1] = 1'bX;
end 
// expected rs2_data_HE_check[ 0 ]
initial
begin
	rs2_data_HE_check_expected[0] = 1'bX;
end 
// expected rs2_data_HM_check[ 31 ]
initial
begin
	rs2_data_HM_check_expected[31] = 1'bX;
end 
// expected rs2_data_HM_check[ 30 ]
initial
begin
	rs2_data_HM_check_expected[30] = 1'bX;
end 
// expected rs2_data_HM_check[ 29 ]
initial
begin
	rs2_data_HM_check_expected[29] = 1'bX;
end 
// expected rs2_data_HM_check[ 28 ]
initial
begin
	rs2_data_HM_check_expected[28] = 1'bX;
end 
// expected rs2_data_HM_check[ 27 ]
initial
begin
	rs2_data_HM_check_expected[27] = 1'bX;
end 
// expected rs2_data_HM_check[ 26 ]
initial
begin
	rs2_data_HM_check_expected[26] = 1'bX;
end 
// expected rs2_data_HM_check[ 25 ]
initial
begin
	rs2_data_HM_check_expected[25] = 1'bX;
end 
// expected rs2_data_HM_check[ 24 ]
initial
begin
	rs2_data_HM_check_expected[24] = 1'bX;
end 
// expected rs2_data_HM_check[ 23 ]
initial
begin
	rs2_data_HM_check_expected[23] = 1'bX;
end 
// expected rs2_data_HM_check[ 22 ]
initial
begin
	rs2_data_HM_check_expected[22] = 1'bX;
end 
// expected rs2_data_HM_check[ 21 ]
initial
begin
	rs2_data_HM_check_expected[21] = 1'bX;
end 
// expected rs2_data_HM_check[ 20 ]
initial
begin
	rs2_data_HM_check_expected[20] = 1'bX;
end 
// expected rs2_data_HM_check[ 19 ]
initial
begin
	rs2_data_HM_check_expected[19] = 1'bX;
end 
// expected rs2_data_HM_check[ 18 ]
initial
begin
	rs2_data_HM_check_expected[18] = 1'bX;
end 
// expected rs2_data_HM_check[ 17 ]
initial
begin
	rs2_data_HM_check_expected[17] = 1'bX;
end 
// expected rs2_data_HM_check[ 16 ]
initial
begin
	rs2_data_HM_check_expected[16] = 1'bX;
end 
// expected rs2_data_HM_check[ 15 ]
initial
begin
	rs2_data_HM_check_expected[15] = 1'bX;
end 
// expected rs2_data_HM_check[ 14 ]
initial
begin
	rs2_data_HM_check_expected[14] = 1'bX;
end 
// expected rs2_data_HM_check[ 13 ]
initial
begin
	rs2_data_HM_check_expected[13] = 1'bX;
end 
// expected rs2_data_HM_check[ 12 ]
initial
begin
	rs2_data_HM_check_expected[12] = 1'bX;
end 
// expected rs2_data_HM_check[ 11 ]
initial
begin
	rs2_data_HM_check_expected[11] = 1'bX;
end 
// expected rs2_data_HM_check[ 10 ]
initial
begin
	rs2_data_HM_check_expected[10] = 1'bX;
end 
// expected rs2_data_HM_check[ 9 ]
initial
begin
	rs2_data_HM_check_expected[9] = 1'bX;
end 
// expected rs2_data_HM_check[ 8 ]
initial
begin
	rs2_data_HM_check_expected[8] = 1'bX;
end 
// expected rs2_data_HM_check[ 7 ]
initial
begin
	rs2_data_HM_check_expected[7] = 1'bX;
end 
// expected rs2_data_HM_check[ 6 ]
initial
begin
	rs2_data_HM_check_expected[6] = 1'bX;
end 
// expected rs2_data_HM_check[ 5 ]
initial
begin
	rs2_data_HM_check_expected[5] = 1'bX;
end 
// expected rs2_data_HM_check[ 4 ]
initial
begin
	rs2_data_HM_check_expected[4] = 1'bX;
end 
// expected rs2_data_HM_check[ 3 ]
initial
begin
	rs2_data_HM_check_expected[3] = 1'bX;
end 
// expected rs2_data_HM_check[ 2 ]
initial
begin
	rs2_data_HM_check_expected[2] = 1'bX;
end 
// expected rs2_data_HM_check[ 1 ]
initial
begin
	rs2_data_HM_check_expected[1] = 1'bX;
end 
// expected rs2_data_HM_check[ 0 ]
initial
begin
	rs2_data_HM_check_expected[0] = 1'bX;
end 
// generate trigger
always @(ForwardAE_check_expected or ForwardAE_check or ForwardBE_check_expected or ForwardBE_check or alu_data_M_check_expected or alu_data_M_check or checker1_expected or checker1 or checker2_expected or checker2 or checker3_expected or checker3 or checker4_expected or checker4 or ldStall_check_expected or ldStall_check or o_insn_vld_expected or o_insn_vld or o_io_hex0_expected or o_io_hex0 or o_io_hex1_expected or o_io_hex1 or o_io_hex2_expected or o_io_hex2 or o_io_hex3_expected or o_io_hex3 or o_io_hex4_expected or o_io_hex4 or o_io_hex5_expected or o_io_hex5 or o_io_hex6_expected or o_io_hex6 or o_io_hex7_expected or o_io_hex7 or o_io_lcd_expected or o_io_lcd or o_io_ledg_expected or o_io_ledg or o_io_ledr_expected or o_io_ledr or o_pc_debug_expected or o_pc_debug or rs1_data_HE_check_expected or rs1_data_HE_check or rs2_data_HE_check_expected or rs2_data_HE_check or rs2_data_HM_check_expected or rs2_data_HM_check)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ForwardAE_check = %b | expected ForwardBE_check = %b | expected alu_data_M_check = %b | expected checker1 = %b | expected checker2 = %b | expected checker3 = %b | expected checker4 = %b | expected ldStall_check = %b | expected o_insn_vld = %b | expected o_io_hex0 = %b | expected o_io_hex1 = %b | expected o_io_hex2 = %b | expected o_io_hex3 = %b | expected o_io_hex4 = %b | expected o_io_hex5 = %b | expected o_io_hex6 = %b | expected o_io_hex7 = %b | expected o_io_lcd = %b | expected o_io_ledg = %b | expected o_io_ledr = %b | expected o_pc_debug = %b | expected rs1_data_HE_check = %b | expected rs2_data_HE_check = %b | expected rs2_data_HM_check = %b | ",ForwardAE_check_expected_prev,ForwardBE_check_expected_prev,alu_data_M_check_expected_prev,checker1_expected_prev,checker2_expected_prev,checker3_expected_prev,checker4_expected_prev,ldStall_check_expected_prev,o_insn_vld_expected_prev,o_io_hex0_expected_prev,o_io_hex1_expected_prev,o_io_hex2_expected_prev,o_io_hex3_expected_prev,o_io_hex4_expected_prev,o_io_hex5_expected_prev,o_io_hex6_expected_prev,o_io_hex7_expected_prev,o_io_lcd_expected_prev,o_io_ledg_expected_prev,o_io_ledr_expected_prev,o_pc_debug_expected_prev,rs1_data_HE_check_expected_prev,rs2_data_HE_check_expected_prev,rs2_data_HM_check_expected_prev);
	$display("| real ForwardAE_check = %b | real ForwardBE_check = %b | real alu_data_M_check = %b | real checker1 = %b | real checker2 = %b | real checker3 = %b | real checker4 = %b | real ldStall_check = %b | real o_insn_vld = %b | real o_io_hex0 = %b | real o_io_hex1 = %b | real o_io_hex2 = %b | real o_io_hex3 = %b | real o_io_hex4 = %b | real o_io_hex5 = %b | real o_io_hex6 = %b | real o_io_hex7 = %b | real o_io_lcd = %b | real o_io_ledg = %b | real o_io_ledr = %b | real o_pc_debug = %b | real rs1_data_HE_check = %b | real rs2_data_HE_check = %b | real rs2_data_HM_check = %b | ",ForwardAE_check_prev,ForwardBE_check_prev,alu_data_M_check_prev,checker1_prev,checker2_prev,checker3_prev,checker4_prev,ldStall_check_prev,o_insn_vld_prev,o_io_hex0_prev,o_io_hex1_prev,o_io_hex2_prev,o_io_hex3_prev,o_io_hex4_prev,o_io_hex5_prev,o_io_hex6_prev,o_io_hex7_prev,o_io_lcd_prev,o_io_ledg_prev,o_io_ledr_prev,o_pc_debug_prev,rs1_data_HE_check_prev,rs2_data_HE_check_prev,rs2_data_HM_check_prev);
`endif
	if (
		( ForwardAE_check_expected_prev[0] !== 1'bx ) && ( ForwardAE_check_prev[0] !== ForwardAE_check_expected_prev[0] )
		&& ((ForwardAE_check_expected_prev[0] !== last_ForwardAE_check_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardAE_check[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardAE_check_expected_prev);
		$display ("     Real value = %b", ForwardAE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ForwardAE_check_exp[0] = ForwardAE_check_expected_prev[0];
	end
	if (
		( ForwardAE_check_expected_prev[1] !== 1'bx ) && ( ForwardAE_check_prev[1] !== ForwardAE_check_expected_prev[1] )
		&& ((ForwardAE_check_expected_prev[1] !== last_ForwardAE_check_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardAE_check[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardAE_check_expected_prev);
		$display ("     Real value = %b", ForwardAE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ForwardAE_check_exp[1] = ForwardAE_check_expected_prev[1];
	end
	if (
		( ForwardBE_check_expected_prev[0] !== 1'bx ) && ( ForwardBE_check_prev[0] !== ForwardBE_check_expected_prev[0] )
		&& ((ForwardBE_check_expected_prev[0] !== last_ForwardBE_check_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardBE_check[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardBE_check_expected_prev);
		$display ("     Real value = %b", ForwardBE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ForwardBE_check_exp[0] = ForwardBE_check_expected_prev[0];
	end
	if (
		( ForwardBE_check_expected_prev[1] !== 1'bx ) && ( ForwardBE_check_prev[1] !== ForwardBE_check_expected_prev[1] )
		&& ((ForwardBE_check_expected_prev[1] !== last_ForwardBE_check_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ForwardBE_check[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ForwardBE_check_expected_prev);
		$display ("     Real value = %b", ForwardBE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ForwardBE_check_exp[1] = ForwardBE_check_expected_prev[1];
	end
	if (
		( alu_data_M_check_expected_prev[0] !== 1'bx ) && ( alu_data_M_check_prev[0] !== alu_data_M_check_expected_prev[0] )
		&& ((alu_data_M_check_expected_prev[0] !== last_alu_data_M_check_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[0] = alu_data_M_check_expected_prev[0];
	end
	if (
		( alu_data_M_check_expected_prev[1] !== 1'bx ) && ( alu_data_M_check_prev[1] !== alu_data_M_check_expected_prev[1] )
		&& ((alu_data_M_check_expected_prev[1] !== last_alu_data_M_check_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[1] = alu_data_M_check_expected_prev[1];
	end
	if (
		( alu_data_M_check_expected_prev[2] !== 1'bx ) && ( alu_data_M_check_prev[2] !== alu_data_M_check_expected_prev[2] )
		&& ((alu_data_M_check_expected_prev[2] !== last_alu_data_M_check_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[2] = alu_data_M_check_expected_prev[2];
	end
	if (
		( alu_data_M_check_expected_prev[3] !== 1'bx ) && ( alu_data_M_check_prev[3] !== alu_data_M_check_expected_prev[3] )
		&& ((alu_data_M_check_expected_prev[3] !== last_alu_data_M_check_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[3] = alu_data_M_check_expected_prev[3];
	end
	if (
		( alu_data_M_check_expected_prev[4] !== 1'bx ) && ( alu_data_M_check_prev[4] !== alu_data_M_check_expected_prev[4] )
		&& ((alu_data_M_check_expected_prev[4] !== last_alu_data_M_check_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[4] = alu_data_M_check_expected_prev[4];
	end
	if (
		( alu_data_M_check_expected_prev[5] !== 1'bx ) && ( alu_data_M_check_prev[5] !== alu_data_M_check_expected_prev[5] )
		&& ((alu_data_M_check_expected_prev[5] !== last_alu_data_M_check_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[5] = alu_data_M_check_expected_prev[5];
	end
	if (
		( alu_data_M_check_expected_prev[6] !== 1'bx ) && ( alu_data_M_check_prev[6] !== alu_data_M_check_expected_prev[6] )
		&& ((alu_data_M_check_expected_prev[6] !== last_alu_data_M_check_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[6] = alu_data_M_check_expected_prev[6];
	end
	if (
		( alu_data_M_check_expected_prev[7] !== 1'bx ) && ( alu_data_M_check_prev[7] !== alu_data_M_check_expected_prev[7] )
		&& ((alu_data_M_check_expected_prev[7] !== last_alu_data_M_check_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[7] = alu_data_M_check_expected_prev[7];
	end
	if (
		( alu_data_M_check_expected_prev[8] !== 1'bx ) && ( alu_data_M_check_prev[8] !== alu_data_M_check_expected_prev[8] )
		&& ((alu_data_M_check_expected_prev[8] !== last_alu_data_M_check_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[8] = alu_data_M_check_expected_prev[8];
	end
	if (
		( alu_data_M_check_expected_prev[9] !== 1'bx ) && ( alu_data_M_check_prev[9] !== alu_data_M_check_expected_prev[9] )
		&& ((alu_data_M_check_expected_prev[9] !== last_alu_data_M_check_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[9] = alu_data_M_check_expected_prev[9];
	end
	if (
		( alu_data_M_check_expected_prev[10] !== 1'bx ) && ( alu_data_M_check_prev[10] !== alu_data_M_check_expected_prev[10] )
		&& ((alu_data_M_check_expected_prev[10] !== last_alu_data_M_check_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[10] = alu_data_M_check_expected_prev[10];
	end
	if (
		( alu_data_M_check_expected_prev[11] !== 1'bx ) && ( alu_data_M_check_prev[11] !== alu_data_M_check_expected_prev[11] )
		&& ((alu_data_M_check_expected_prev[11] !== last_alu_data_M_check_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[11] = alu_data_M_check_expected_prev[11];
	end
	if (
		( alu_data_M_check_expected_prev[12] !== 1'bx ) && ( alu_data_M_check_prev[12] !== alu_data_M_check_expected_prev[12] )
		&& ((alu_data_M_check_expected_prev[12] !== last_alu_data_M_check_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[12] = alu_data_M_check_expected_prev[12];
	end
	if (
		( alu_data_M_check_expected_prev[13] !== 1'bx ) && ( alu_data_M_check_prev[13] !== alu_data_M_check_expected_prev[13] )
		&& ((alu_data_M_check_expected_prev[13] !== last_alu_data_M_check_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[13] = alu_data_M_check_expected_prev[13];
	end
	if (
		( alu_data_M_check_expected_prev[14] !== 1'bx ) && ( alu_data_M_check_prev[14] !== alu_data_M_check_expected_prev[14] )
		&& ((alu_data_M_check_expected_prev[14] !== last_alu_data_M_check_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[14] = alu_data_M_check_expected_prev[14];
	end
	if (
		( alu_data_M_check_expected_prev[15] !== 1'bx ) && ( alu_data_M_check_prev[15] !== alu_data_M_check_expected_prev[15] )
		&& ((alu_data_M_check_expected_prev[15] !== last_alu_data_M_check_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[15] = alu_data_M_check_expected_prev[15];
	end
	if (
		( alu_data_M_check_expected_prev[16] !== 1'bx ) && ( alu_data_M_check_prev[16] !== alu_data_M_check_expected_prev[16] )
		&& ((alu_data_M_check_expected_prev[16] !== last_alu_data_M_check_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[16] = alu_data_M_check_expected_prev[16];
	end
	if (
		( alu_data_M_check_expected_prev[17] !== 1'bx ) && ( alu_data_M_check_prev[17] !== alu_data_M_check_expected_prev[17] )
		&& ((alu_data_M_check_expected_prev[17] !== last_alu_data_M_check_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[17] = alu_data_M_check_expected_prev[17];
	end
	if (
		( alu_data_M_check_expected_prev[18] !== 1'bx ) && ( alu_data_M_check_prev[18] !== alu_data_M_check_expected_prev[18] )
		&& ((alu_data_M_check_expected_prev[18] !== last_alu_data_M_check_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[18] = alu_data_M_check_expected_prev[18];
	end
	if (
		( alu_data_M_check_expected_prev[19] !== 1'bx ) && ( alu_data_M_check_prev[19] !== alu_data_M_check_expected_prev[19] )
		&& ((alu_data_M_check_expected_prev[19] !== last_alu_data_M_check_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[19] = alu_data_M_check_expected_prev[19];
	end
	if (
		( alu_data_M_check_expected_prev[20] !== 1'bx ) && ( alu_data_M_check_prev[20] !== alu_data_M_check_expected_prev[20] )
		&& ((alu_data_M_check_expected_prev[20] !== last_alu_data_M_check_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[20] = alu_data_M_check_expected_prev[20];
	end
	if (
		( alu_data_M_check_expected_prev[21] !== 1'bx ) && ( alu_data_M_check_prev[21] !== alu_data_M_check_expected_prev[21] )
		&& ((alu_data_M_check_expected_prev[21] !== last_alu_data_M_check_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[21] = alu_data_M_check_expected_prev[21];
	end
	if (
		( alu_data_M_check_expected_prev[22] !== 1'bx ) && ( alu_data_M_check_prev[22] !== alu_data_M_check_expected_prev[22] )
		&& ((alu_data_M_check_expected_prev[22] !== last_alu_data_M_check_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[22] = alu_data_M_check_expected_prev[22];
	end
	if (
		( alu_data_M_check_expected_prev[23] !== 1'bx ) && ( alu_data_M_check_prev[23] !== alu_data_M_check_expected_prev[23] )
		&& ((alu_data_M_check_expected_prev[23] !== last_alu_data_M_check_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[23] = alu_data_M_check_expected_prev[23];
	end
	if (
		( alu_data_M_check_expected_prev[24] !== 1'bx ) && ( alu_data_M_check_prev[24] !== alu_data_M_check_expected_prev[24] )
		&& ((alu_data_M_check_expected_prev[24] !== last_alu_data_M_check_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[24] = alu_data_M_check_expected_prev[24];
	end
	if (
		( alu_data_M_check_expected_prev[25] !== 1'bx ) && ( alu_data_M_check_prev[25] !== alu_data_M_check_expected_prev[25] )
		&& ((alu_data_M_check_expected_prev[25] !== last_alu_data_M_check_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[25] = alu_data_M_check_expected_prev[25];
	end
	if (
		( alu_data_M_check_expected_prev[26] !== 1'bx ) && ( alu_data_M_check_prev[26] !== alu_data_M_check_expected_prev[26] )
		&& ((alu_data_M_check_expected_prev[26] !== last_alu_data_M_check_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[26] = alu_data_M_check_expected_prev[26];
	end
	if (
		( alu_data_M_check_expected_prev[27] !== 1'bx ) && ( alu_data_M_check_prev[27] !== alu_data_M_check_expected_prev[27] )
		&& ((alu_data_M_check_expected_prev[27] !== last_alu_data_M_check_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[27] = alu_data_M_check_expected_prev[27];
	end
	if (
		( alu_data_M_check_expected_prev[28] !== 1'bx ) && ( alu_data_M_check_prev[28] !== alu_data_M_check_expected_prev[28] )
		&& ((alu_data_M_check_expected_prev[28] !== last_alu_data_M_check_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[28] = alu_data_M_check_expected_prev[28];
	end
	if (
		( alu_data_M_check_expected_prev[29] !== 1'bx ) && ( alu_data_M_check_prev[29] !== alu_data_M_check_expected_prev[29] )
		&& ((alu_data_M_check_expected_prev[29] !== last_alu_data_M_check_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[29] = alu_data_M_check_expected_prev[29];
	end
	if (
		( alu_data_M_check_expected_prev[30] !== 1'bx ) && ( alu_data_M_check_prev[30] !== alu_data_M_check_expected_prev[30] )
		&& ((alu_data_M_check_expected_prev[30] !== last_alu_data_M_check_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[30] = alu_data_M_check_expected_prev[30];
	end
	if (
		( alu_data_M_check_expected_prev[31] !== 1'bx ) && ( alu_data_M_check_prev[31] !== alu_data_M_check_expected_prev[31] )
		&& ((alu_data_M_check_expected_prev[31] !== last_alu_data_M_check_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alu_data_M_check[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alu_data_M_check_expected_prev);
		$display ("     Real value = %b", alu_data_M_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_alu_data_M_check_exp[31] = alu_data_M_check_expected_prev[31];
	end
	if (
		( checker1_expected_prev[0] !== 1'bx ) && ( checker1_prev[0] !== checker1_expected_prev[0] )
		&& ((checker1_expected_prev[0] !== last_checker1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[0] = checker1_expected_prev[0];
	end
	if (
		( checker1_expected_prev[1] !== 1'bx ) && ( checker1_prev[1] !== checker1_expected_prev[1] )
		&& ((checker1_expected_prev[1] !== last_checker1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[1] = checker1_expected_prev[1];
	end
	if (
		( checker1_expected_prev[2] !== 1'bx ) && ( checker1_prev[2] !== checker1_expected_prev[2] )
		&& ((checker1_expected_prev[2] !== last_checker1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[2] = checker1_expected_prev[2];
	end
	if (
		( checker1_expected_prev[3] !== 1'bx ) && ( checker1_prev[3] !== checker1_expected_prev[3] )
		&& ((checker1_expected_prev[3] !== last_checker1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[3] = checker1_expected_prev[3];
	end
	if (
		( checker1_expected_prev[4] !== 1'bx ) && ( checker1_prev[4] !== checker1_expected_prev[4] )
		&& ((checker1_expected_prev[4] !== last_checker1_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[4] = checker1_expected_prev[4];
	end
	if (
		( checker1_expected_prev[5] !== 1'bx ) && ( checker1_prev[5] !== checker1_expected_prev[5] )
		&& ((checker1_expected_prev[5] !== last_checker1_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[5] = checker1_expected_prev[5];
	end
	if (
		( checker1_expected_prev[6] !== 1'bx ) && ( checker1_prev[6] !== checker1_expected_prev[6] )
		&& ((checker1_expected_prev[6] !== last_checker1_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[6] = checker1_expected_prev[6];
	end
	if (
		( checker1_expected_prev[7] !== 1'bx ) && ( checker1_prev[7] !== checker1_expected_prev[7] )
		&& ((checker1_expected_prev[7] !== last_checker1_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[7] = checker1_expected_prev[7];
	end
	if (
		( checker1_expected_prev[8] !== 1'bx ) && ( checker1_prev[8] !== checker1_expected_prev[8] )
		&& ((checker1_expected_prev[8] !== last_checker1_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[8] = checker1_expected_prev[8];
	end
	if (
		( checker1_expected_prev[9] !== 1'bx ) && ( checker1_prev[9] !== checker1_expected_prev[9] )
		&& ((checker1_expected_prev[9] !== last_checker1_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[9] = checker1_expected_prev[9];
	end
	if (
		( checker1_expected_prev[10] !== 1'bx ) && ( checker1_prev[10] !== checker1_expected_prev[10] )
		&& ((checker1_expected_prev[10] !== last_checker1_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[10] = checker1_expected_prev[10];
	end
	if (
		( checker1_expected_prev[11] !== 1'bx ) && ( checker1_prev[11] !== checker1_expected_prev[11] )
		&& ((checker1_expected_prev[11] !== last_checker1_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[11] = checker1_expected_prev[11];
	end
	if (
		( checker1_expected_prev[12] !== 1'bx ) && ( checker1_prev[12] !== checker1_expected_prev[12] )
		&& ((checker1_expected_prev[12] !== last_checker1_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[12] = checker1_expected_prev[12];
	end
	if (
		( checker1_expected_prev[13] !== 1'bx ) && ( checker1_prev[13] !== checker1_expected_prev[13] )
		&& ((checker1_expected_prev[13] !== last_checker1_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[13] = checker1_expected_prev[13];
	end
	if (
		( checker1_expected_prev[14] !== 1'bx ) && ( checker1_prev[14] !== checker1_expected_prev[14] )
		&& ((checker1_expected_prev[14] !== last_checker1_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[14] = checker1_expected_prev[14];
	end
	if (
		( checker1_expected_prev[15] !== 1'bx ) && ( checker1_prev[15] !== checker1_expected_prev[15] )
		&& ((checker1_expected_prev[15] !== last_checker1_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[15] = checker1_expected_prev[15];
	end
	if (
		( checker1_expected_prev[16] !== 1'bx ) && ( checker1_prev[16] !== checker1_expected_prev[16] )
		&& ((checker1_expected_prev[16] !== last_checker1_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[16] = checker1_expected_prev[16];
	end
	if (
		( checker1_expected_prev[17] !== 1'bx ) && ( checker1_prev[17] !== checker1_expected_prev[17] )
		&& ((checker1_expected_prev[17] !== last_checker1_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[17] = checker1_expected_prev[17];
	end
	if (
		( checker1_expected_prev[18] !== 1'bx ) && ( checker1_prev[18] !== checker1_expected_prev[18] )
		&& ((checker1_expected_prev[18] !== last_checker1_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[18] = checker1_expected_prev[18];
	end
	if (
		( checker1_expected_prev[19] !== 1'bx ) && ( checker1_prev[19] !== checker1_expected_prev[19] )
		&& ((checker1_expected_prev[19] !== last_checker1_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[19] = checker1_expected_prev[19];
	end
	if (
		( checker1_expected_prev[20] !== 1'bx ) && ( checker1_prev[20] !== checker1_expected_prev[20] )
		&& ((checker1_expected_prev[20] !== last_checker1_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[20] = checker1_expected_prev[20];
	end
	if (
		( checker1_expected_prev[21] !== 1'bx ) && ( checker1_prev[21] !== checker1_expected_prev[21] )
		&& ((checker1_expected_prev[21] !== last_checker1_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[21] = checker1_expected_prev[21];
	end
	if (
		( checker1_expected_prev[22] !== 1'bx ) && ( checker1_prev[22] !== checker1_expected_prev[22] )
		&& ((checker1_expected_prev[22] !== last_checker1_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[22] = checker1_expected_prev[22];
	end
	if (
		( checker1_expected_prev[23] !== 1'bx ) && ( checker1_prev[23] !== checker1_expected_prev[23] )
		&& ((checker1_expected_prev[23] !== last_checker1_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[23] = checker1_expected_prev[23];
	end
	if (
		( checker1_expected_prev[24] !== 1'bx ) && ( checker1_prev[24] !== checker1_expected_prev[24] )
		&& ((checker1_expected_prev[24] !== last_checker1_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[24] = checker1_expected_prev[24];
	end
	if (
		( checker1_expected_prev[25] !== 1'bx ) && ( checker1_prev[25] !== checker1_expected_prev[25] )
		&& ((checker1_expected_prev[25] !== last_checker1_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[25] = checker1_expected_prev[25];
	end
	if (
		( checker1_expected_prev[26] !== 1'bx ) && ( checker1_prev[26] !== checker1_expected_prev[26] )
		&& ((checker1_expected_prev[26] !== last_checker1_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[26] = checker1_expected_prev[26];
	end
	if (
		( checker1_expected_prev[27] !== 1'bx ) && ( checker1_prev[27] !== checker1_expected_prev[27] )
		&& ((checker1_expected_prev[27] !== last_checker1_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[27] = checker1_expected_prev[27];
	end
	if (
		( checker1_expected_prev[28] !== 1'bx ) && ( checker1_prev[28] !== checker1_expected_prev[28] )
		&& ((checker1_expected_prev[28] !== last_checker1_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[28] = checker1_expected_prev[28];
	end
	if (
		( checker1_expected_prev[29] !== 1'bx ) && ( checker1_prev[29] !== checker1_expected_prev[29] )
		&& ((checker1_expected_prev[29] !== last_checker1_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[29] = checker1_expected_prev[29];
	end
	if (
		( checker1_expected_prev[30] !== 1'bx ) && ( checker1_prev[30] !== checker1_expected_prev[30] )
		&& ((checker1_expected_prev[30] !== last_checker1_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[30] = checker1_expected_prev[30];
	end
	if (
		( checker1_expected_prev[31] !== 1'bx ) && ( checker1_prev[31] !== checker1_expected_prev[31] )
		&& ((checker1_expected_prev[31] !== last_checker1_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker1_expected_prev);
		$display ("     Real value = %b", checker1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_checker1_exp[31] = checker1_expected_prev[31];
	end
	if (
		( checker2_expected_prev[0] !== 1'bx ) && ( checker2_prev[0] !== checker2_expected_prev[0] )
		&& ((checker2_expected_prev[0] !== last_checker2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[0] = checker2_expected_prev[0];
	end
	if (
		( checker2_expected_prev[1] !== 1'bx ) && ( checker2_prev[1] !== checker2_expected_prev[1] )
		&& ((checker2_expected_prev[1] !== last_checker2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[1] = checker2_expected_prev[1];
	end
	if (
		( checker2_expected_prev[2] !== 1'bx ) && ( checker2_prev[2] !== checker2_expected_prev[2] )
		&& ((checker2_expected_prev[2] !== last_checker2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[2] = checker2_expected_prev[2];
	end
	if (
		( checker2_expected_prev[3] !== 1'bx ) && ( checker2_prev[3] !== checker2_expected_prev[3] )
		&& ((checker2_expected_prev[3] !== last_checker2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[3] = checker2_expected_prev[3];
	end
	if (
		( checker2_expected_prev[4] !== 1'bx ) && ( checker2_prev[4] !== checker2_expected_prev[4] )
		&& ((checker2_expected_prev[4] !== last_checker2_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[4] = checker2_expected_prev[4];
	end
	if (
		( checker2_expected_prev[5] !== 1'bx ) && ( checker2_prev[5] !== checker2_expected_prev[5] )
		&& ((checker2_expected_prev[5] !== last_checker2_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[5] = checker2_expected_prev[5];
	end
	if (
		( checker2_expected_prev[6] !== 1'bx ) && ( checker2_prev[6] !== checker2_expected_prev[6] )
		&& ((checker2_expected_prev[6] !== last_checker2_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[6] = checker2_expected_prev[6];
	end
	if (
		( checker2_expected_prev[7] !== 1'bx ) && ( checker2_prev[7] !== checker2_expected_prev[7] )
		&& ((checker2_expected_prev[7] !== last_checker2_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[7] = checker2_expected_prev[7];
	end
	if (
		( checker2_expected_prev[8] !== 1'bx ) && ( checker2_prev[8] !== checker2_expected_prev[8] )
		&& ((checker2_expected_prev[8] !== last_checker2_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[8] = checker2_expected_prev[8];
	end
	if (
		( checker2_expected_prev[9] !== 1'bx ) && ( checker2_prev[9] !== checker2_expected_prev[9] )
		&& ((checker2_expected_prev[9] !== last_checker2_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[9] = checker2_expected_prev[9];
	end
	if (
		( checker2_expected_prev[10] !== 1'bx ) && ( checker2_prev[10] !== checker2_expected_prev[10] )
		&& ((checker2_expected_prev[10] !== last_checker2_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[10] = checker2_expected_prev[10];
	end
	if (
		( checker2_expected_prev[11] !== 1'bx ) && ( checker2_prev[11] !== checker2_expected_prev[11] )
		&& ((checker2_expected_prev[11] !== last_checker2_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[11] = checker2_expected_prev[11];
	end
	if (
		( checker2_expected_prev[12] !== 1'bx ) && ( checker2_prev[12] !== checker2_expected_prev[12] )
		&& ((checker2_expected_prev[12] !== last_checker2_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[12] = checker2_expected_prev[12];
	end
	if (
		( checker2_expected_prev[13] !== 1'bx ) && ( checker2_prev[13] !== checker2_expected_prev[13] )
		&& ((checker2_expected_prev[13] !== last_checker2_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[13] = checker2_expected_prev[13];
	end
	if (
		( checker2_expected_prev[14] !== 1'bx ) && ( checker2_prev[14] !== checker2_expected_prev[14] )
		&& ((checker2_expected_prev[14] !== last_checker2_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[14] = checker2_expected_prev[14];
	end
	if (
		( checker2_expected_prev[15] !== 1'bx ) && ( checker2_prev[15] !== checker2_expected_prev[15] )
		&& ((checker2_expected_prev[15] !== last_checker2_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[15] = checker2_expected_prev[15];
	end
	if (
		( checker2_expected_prev[16] !== 1'bx ) && ( checker2_prev[16] !== checker2_expected_prev[16] )
		&& ((checker2_expected_prev[16] !== last_checker2_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[16] = checker2_expected_prev[16];
	end
	if (
		( checker2_expected_prev[17] !== 1'bx ) && ( checker2_prev[17] !== checker2_expected_prev[17] )
		&& ((checker2_expected_prev[17] !== last_checker2_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[17] = checker2_expected_prev[17];
	end
	if (
		( checker2_expected_prev[18] !== 1'bx ) && ( checker2_prev[18] !== checker2_expected_prev[18] )
		&& ((checker2_expected_prev[18] !== last_checker2_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[18] = checker2_expected_prev[18];
	end
	if (
		( checker2_expected_prev[19] !== 1'bx ) && ( checker2_prev[19] !== checker2_expected_prev[19] )
		&& ((checker2_expected_prev[19] !== last_checker2_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[19] = checker2_expected_prev[19];
	end
	if (
		( checker2_expected_prev[20] !== 1'bx ) && ( checker2_prev[20] !== checker2_expected_prev[20] )
		&& ((checker2_expected_prev[20] !== last_checker2_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[20] = checker2_expected_prev[20];
	end
	if (
		( checker2_expected_prev[21] !== 1'bx ) && ( checker2_prev[21] !== checker2_expected_prev[21] )
		&& ((checker2_expected_prev[21] !== last_checker2_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[21] = checker2_expected_prev[21];
	end
	if (
		( checker2_expected_prev[22] !== 1'bx ) && ( checker2_prev[22] !== checker2_expected_prev[22] )
		&& ((checker2_expected_prev[22] !== last_checker2_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[22] = checker2_expected_prev[22];
	end
	if (
		( checker2_expected_prev[23] !== 1'bx ) && ( checker2_prev[23] !== checker2_expected_prev[23] )
		&& ((checker2_expected_prev[23] !== last_checker2_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[23] = checker2_expected_prev[23];
	end
	if (
		( checker2_expected_prev[24] !== 1'bx ) && ( checker2_prev[24] !== checker2_expected_prev[24] )
		&& ((checker2_expected_prev[24] !== last_checker2_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[24] = checker2_expected_prev[24];
	end
	if (
		( checker2_expected_prev[25] !== 1'bx ) && ( checker2_prev[25] !== checker2_expected_prev[25] )
		&& ((checker2_expected_prev[25] !== last_checker2_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[25] = checker2_expected_prev[25];
	end
	if (
		( checker2_expected_prev[26] !== 1'bx ) && ( checker2_prev[26] !== checker2_expected_prev[26] )
		&& ((checker2_expected_prev[26] !== last_checker2_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[26] = checker2_expected_prev[26];
	end
	if (
		( checker2_expected_prev[27] !== 1'bx ) && ( checker2_prev[27] !== checker2_expected_prev[27] )
		&& ((checker2_expected_prev[27] !== last_checker2_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[27] = checker2_expected_prev[27];
	end
	if (
		( checker2_expected_prev[28] !== 1'bx ) && ( checker2_prev[28] !== checker2_expected_prev[28] )
		&& ((checker2_expected_prev[28] !== last_checker2_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[28] = checker2_expected_prev[28];
	end
	if (
		( checker2_expected_prev[29] !== 1'bx ) && ( checker2_prev[29] !== checker2_expected_prev[29] )
		&& ((checker2_expected_prev[29] !== last_checker2_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[29] = checker2_expected_prev[29];
	end
	if (
		( checker2_expected_prev[30] !== 1'bx ) && ( checker2_prev[30] !== checker2_expected_prev[30] )
		&& ((checker2_expected_prev[30] !== last_checker2_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[30] = checker2_expected_prev[30];
	end
	if (
		( checker2_expected_prev[31] !== 1'bx ) && ( checker2_prev[31] !== checker2_expected_prev[31] )
		&& ((checker2_expected_prev[31] !== last_checker2_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker2_expected_prev);
		$display ("     Real value = %b", checker2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_checker2_exp[31] = checker2_expected_prev[31];
	end
	if (
		( checker3_expected_prev[0] !== 1'bx ) && ( checker3_prev[0] !== checker3_expected_prev[0] )
		&& ((checker3_expected_prev[0] !== last_checker3_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[0] = checker3_expected_prev[0];
	end
	if (
		( checker3_expected_prev[1] !== 1'bx ) && ( checker3_prev[1] !== checker3_expected_prev[1] )
		&& ((checker3_expected_prev[1] !== last_checker3_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[1] = checker3_expected_prev[1];
	end
	if (
		( checker3_expected_prev[2] !== 1'bx ) && ( checker3_prev[2] !== checker3_expected_prev[2] )
		&& ((checker3_expected_prev[2] !== last_checker3_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[2] = checker3_expected_prev[2];
	end
	if (
		( checker3_expected_prev[3] !== 1'bx ) && ( checker3_prev[3] !== checker3_expected_prev[3] )
		&& ((checker3_expected_prev[3] !== last_checker3_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[3] = checker3_expected_prev[3];
	end
	if (
		( checker3_expected_prev[4] !== 1'bx ) && ( checker3_prev[4] !== checker3_expected_prev[4] )
		&& ((checker3_expected_prev[4] !== last_checker3_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[4] = checker3_expected_prev[4];
	end
	if (
		( checker3_expected_prev[5] !== 1'bx ) && ( checker3_prev[5] !== checker3_expected_prev[5] )
		&& ((checker3_expected_prev[5] !== last_checker3_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[5] = checker3_expected_prev[5];
	end
	if (
		( checker3_expected_prev[6] !== 1'bx ) && ( checker3_prev[6] !== checker3_expected_prev[6] )
		&& ((checker3_expected_prev[6] !== last_checker3_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[6] = checker3_expected_prev[6];
	end
	if (
		( checker3_expected_prev[7] !== 1'bx ) && ( checker3_prev[7] !== checker3_expected_prev[7] )
		&& ((checker3_expected_prev[7] !== last_checker3_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[7] = checker3_expected_prev[7];
	end
	if (
		( checker3_expected_prev[8] !== 1'bx ) && ( checker3_prev[8] !== checker3_expected_prev[8] )
		&& ((checker3_expected_prev[8] !== last_checker3_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[8] = checker3_expected_prev[8];
	end
	if (
		( checker3_expected_prev[9] !== 1'bx ) && ( checker3_prev[9] !== checker3_expected_prev[9] )
		&& ((checker3_expected_prev[9] !== last_checker3_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[9] = checker3_expected_prev[9];
	end
	if (
		( checker3_expected_prev[10] !== 1'bx ) && ( checker3_prev[10] !== checker3_expected_prev[10] )
		&& ((checker3_expected_prev[10] !== last_checker3_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[10] = checker3_expected_prev[10];
	end
	if (
		( checker3_expected_prev[11] !== 1'bx ) && ( checker3_prev[11] !== checker3_expected_prev[11] )
		&& ((checker3_expected_prev[11] !== last_checker3_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[11] = checker3_expected_prev[11];
	end
	if (
		( checker3_expected_prev[12] !== 1'bx ) && ( checker3_prev[12] !== checker3_expected_prev[12] )
		&& ((checker3_expected_prev[12] !== last_checker3_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[12] = checker3_expected_prev[12];
	end
	if (
		( checker3_expected_prev[13] !== 1'bx ) && ( checker3_prev[13] !== checker3_expected_prev[13] )
		&& ((checker3_expected_prev[13] !== last_checker3_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[13] = checker3_expected_prev[13];
	end
	if (
		( checker3_expected_prev[14] !== 1'bx ) && ( checker3_prev[14] !== checker3_expected_prev[14] )
		&& ((checker3_expected_prev[14] !== last_checker3_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[14] = checker3_expected_prev[14];
	end
	if (
		( checker3_expected_prev[15] !== 1'bx ) && ( checker3_prev[15] !== checker3_expected_prev[15] )
		&& ((checker3_expected_prev[15] !== last_checker3_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[15] = checker3_expected_prev[15];
	end
	if (
		( checker3_expected_prev[16] !== 1'bx ) && ( checker3_prev[16] !== checker3_expected_prev[16] )
		&& ((checker3_expected_prev[16] !== last_checker3_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[16] = checker3_expected_prev[16];
	end
	if (
		( checker3_expected_prev[17] !== 1'bx ) && ( checker3_prev[17] !== checker3_expected_prev[17] )
		&& ((checker3_expected_prev[17] !== last_checker3_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[17] = checker3_expected_prev[17];
	end
	if (
		( checker3_expected_prev[18] !== 1'bx ) && ( checker3_prev[18] !== checker3_expected_prev[18] )
		&& ((checker3_expected_prev[18] !== last_checker3_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[18] = checker3_expected_prev[18];
	end
	if (
		( checker3_expected_prev[19] !== 1'bx ) && ( checker3_prev[19] !== checker3_expected_prev[19] )
		&& ((checker3_expected_prev[19] !== last_checker3_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[19] = checker3_expected_prev[19];
	end
	if (
		( checker3_expected_prev[20] !== 1'bx ) && ( checker3_prev[20] !== checker3_expected_prev[20] )
		&& ((checker3_expected_prev[20] !== last_checker3_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[20] = checker3_expected_prev[20];
	end
	if (
		( checker3_expected_prev[21] !== 1'bx ) && ( checker3_prev[21] !== checker3_expected_prev[21] )
		&& ((checker3_expected_prev[21] !== last_checker3_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[21] = checker3_expected_prev[21];
	end
	if (
		( checker3_expected_prev[22] !== 1'bx ) && ( checker3_prev[22] !== checker3_expected_prev[22] )
		&& ((checker3_expected_prev[22] !== last_checker3_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[22] = checker3_expected_prev[22];
	end
	if (
		( checker3_expected_prev[23] !== 1'bx ) && ( checker3_prev[23] !== checker3_expected_prev[23] )
		&& ((checker3_expected_prev[23] !== last_checker3_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[23] = checker3_expected_prev[23];
	end
	if (
		( checker3_expected_prev[24] !== 1'bx ) && ( checker3_prev[24] !== checker3_expected_prev[24] )
		&& ((checker3_expected_prev[24] !== last_checker3_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[24] = checker3_expected_prev[24];
	end
	if (
		( checker3_expected_prev[25] !== 1'bx ) && ( checker3_prev[25] !== checker3_expected_prev[25] )
		&& ((checker3_expected_prev[25] !== last_checker3_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[25] = checker3_expected_prev[25];
	end
	if (
		( checker3_expected_prev[26] !== 1'bx ) && ( checker3_prev[26] !== checker3_expected_prev[26] )
		&& ((checker3_expected_prev[26] !== last_checker3_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[26] = checker3_expected_prev[26];
	end
	if (
		( checker3_expected_prev[27] !== 1'bx ) && ( checker3_prev[27] !== checker3_expected_prev[27] )
		&& ((checker3_expected_prev[27] !== last_checker3_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[27] = checker3_expected_prev[27];
	end
	if (
		( checker3_expected_prev[28] !== 1'bx ) && ( checker3_prev[28] !== checker3_expected_prev[28] )
		&& ((checker3_expected_prev[28] !== last_checker3_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[28] = checker3_expected_prev[28];
	end
	if (
		( checker3_expected_prev[29] !== 1'bx ) && ( checker3_prev[29] !== checker3_expected_prev[29] )
		&& ((checker3_expected_prev[29] !== last_checker3_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[29] = checker3_expected_prev[29];
	end
	if (
		( checker3_expected_prev[30] !== 1'bx ) && ( checker3_prev[30] !== checker3_expected_prev[30] )
		&& ((checker3_expected_prev[30] !== last_checker3_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[30] = checker3_expected_prev[30];
	end
	if (
		( checker3_expected_prev[31] !== 1'bx ) && ( checker3_prev[31] !== checker3_expected_prev[31] )
		&& ((checker3_expected_prev[31] !== last_checker3_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker3_expected_prev);
		$display ("     Real value = %b", checker3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_checker3_exp[31] = checker3_expected_prev[31];
	end
	if (
		( checker4_expected_prev[0] !== 1'bx ) && ( checker4_prev[0] !== checker4_expected_prev[0] )
		&& ((checker4_expected_prev[0] !== last_checker4_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[0] = checker4_expected_prev[0];
	end
	if (
		( checker4_expected_prev[1] !== 1'bx ) && ( checker4_prev[1] !== checker4_expected_prev[1] )
		&& ((checker4_expected_prev[1] !== last_checker4_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[1] = checker4_expected_prev[1];
	end
	if (
		( checker4_expected_prev[2] !== 1'bx ) && ( checker4_prev[2] !== checker4_expected_prev[2] )
		&& ((checker4_expected_prev[2] !== last_checker4_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[2] = checker4_expected_prev[2];
	end
	if (
		( checker4_expected_prev[3] !== 1'bx ) && ( checker4_prev[3] !== checker4_expected_prev[3] )
		&& ((checker4_expected_prev[3] !== last_checker4_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[3] = checker4_expected_prev[3];
	end
	if (
		( checker4_expected_prev[4] !== 1'bx ) && ( checker4_prev[4] !== checker4_expected_prev[4] )
		&& ((checker4_expected_prev[4] !== last_checker4_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[4] = checker4_expected_prev[4];
	end
	if (
		( checker4_expected_prev[5] !== 1'bx ) && ( checker4_prev[5] !== checker4_expected_prev[5] )
		&& ((checker4_expected_prev[5] !== last_checker4_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[5] = checker4_expected_prev[5];
	end
	if (
		( checker4_expected_prev[6] !== 1'bx ) && ( checker4_prev[6] !== checker4_expected_prev[6] )
		&& ((checker4_expected_prev[6] !== last_checker4_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[6] = checker4_expected_prev[6];
	end
	if (
		( checker4_expected_prev[7] !== 1'bx ) && ( checker4_prev[7] !== checker4_expected_prev[7] )
		&& ((checker4_expected_prev[7] !== last_checker4_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[7] = checker4_expected_prev[7];
	end
	if (
		( checker4_expected_prev[8] !== 1'bx ) && ( checker4_prev[8] !== checker4_expected_prev[8] )
		&& ((checker4_expected_prev[8] !== last_checker4_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[8] = checker4_expected_prev[8];
	end
	if (
		( checker4_expected_prev[9] !== 1'bx ) && ( checker4_prev[9] !== checker4_expected_prev[9] )
		&& ((checker4_expected_prev[9] !== last_checker4_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[9] = checker4_expected_prev[9];
	end
	if (
		( checker4_expected_prev[10] !== 1'bx ) && ( checker4_prev[10] !== checker4_expected_prev[10] )
		&& ((checker4_expected_prev[10] !== last_checker4_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[10] = checker4_expected_prev[10];
	end
	if (
		( checker4_expected_prev[11] !== 1'bx ) && ( checker4_prev[11] !== checker4_expected_prev[11] )
		&& ((checker4_expected_prev[11] !== last_checker4_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[11] = checker4_expected_prev[11];
	end
	if (
		( checker4_expected_prev[12] !== 1'bx ) && ( checker4_prev[12] !== checker4_expected_prev[12] )
		&& ((checker4_expected_prev[12] !== last_checker4_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[12] = checker4_expected_prev[12];
	end
	if (
		( checker4_expected_prev[13] !== 1'bx ) && ( checker4_prev[13] !== checker4_expected_prev[13] )
		&& ((checker4_expected_prev[13] !== last_checker4_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[13] = checker4_expected_prev[13];
	end
	if (
		( checker4_expected_prev[14] !== 1'bx ) && ( checker4_prev[14] !== checker4_expected_prev[14] )
		&& ((checker4_expected_prev[14] !== last_checker4_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[14] = checker4_expected_prev[14];
	end
	if (
		( checker4_expected_prev[15] !== 1'bx ) && ( checker4_prev[15] !== checker4_expected_prev[15] )
		&& ((checker4_expected_prev[15] !== last_checker4_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[15] = checker4_expected_prev[15];
	end
	if (
		( checker4_expected_prev[16] !== 1'bx ) && ( checker4_prev[16] !== checker4_expected_prev[16] )
		&& ((checker4_expected_prev[16] !== last_checker4_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[16] = checker4_expected_prev[16];
	end
	if (
		( checker4_expected_prev[17] !== 1'bx ) && ( checker4_prev[17] !== checker4_expected_prev[17] )
		&& ((checker4_expected_prev[17] !== last_checker4_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[17] = checker4_expected_prev[17];
	end
	if (
		( checker4_expected_prev[18] !== 1'bx ) && ( checker4_prev[18] !== checker4_expected_prev[18] )
		&& ((checker4_expected_prev[18] !== last_checker4_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[18] = checker4_expected_prev[18];
	end
	if (
		( checker4_expected_prev[19] !== 1'bx ) && ( checker4_prev[19] !== checker4_expected_prev[19] )
		&& ((checker4_expected_prev[19] !== last_checker4_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[19] = checker4_expected_prev[19];
	end
	if (
		( checker4_expected_prev[20] !== 1'bx ) && ( checker4_prev[20] !== checker4_expected_prev[20] )
		&& ((checker4_expected_prev[20] !== last_checker4_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[20] = checker4_expected_prev[20];
	end
	if (
		( checker4_expected_prev[21] !== 1'bx ) && ( checker4_prev[21] !== checker4_expected_prev[21] )
		&& ((checker4_expected_prev[21] !== last_checker4_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[21] = checker4_expected_prev[21];
	end
	if (
		( checker4_expected_prev[22] !== 1'bx ) && ( checker4_prev[22] !== checker4_expected_prev[22] )
		&& ((checker4_expected_prev[22] !== last_checker4_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[22] = checker4_expected_prev[22];
	end
	if (
		( checker4_expected_prev[23] !== 1'bx ) && ( checker4_prev[23] !== checker4_expected_prev[23] )
		&& ((checker4_expected_prev[23] !== last_checker4_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[23] = checker4_expected_prev[23];
	end
	if (
		( checker4_expected_prev[24] !== 1'bx ) && ( checker4_prev[24] !== checker4_expected_prev[24] )
		&& ((checker4_expected_prev[24] !== last_checker4_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[24] = checker4_expected_prev[24];
	end
	if (
		( checker4_expected_prev[25] !== 1'bx ) && ( checker4_prev[25] !== checker4_expected_prev[25] )
		&& ((checker4_expected_prev[25] !== last_checker4_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[25] = checker4_expected_prev[25];
	end
	if (
		( checker4_expected_prev[26] !== 1'bx ) && ( checker4_prev[26] !== checker4_expected_prev[26] )
		&& ((checker4_expected_prev[26] !== last_checker4_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[26] = checker4_expected_prev[26];
	end
	if (
		( checker4_expected_prev[27] !== 1'bx ) && ( checker4_prev[27] !== checker4_expected_prev[27] )
		&& ((checker4_expected_prev[27] !== last_checker4_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[27] = checker4_expected_prev[27];
	end
	if (
		( checker4_expected_prev[28] !== 1'bx ) && ( checker4_prev[28] !== checker4_expected_prev[28] )
		&& ((checker4_expected_prev[28] !== last_checker4_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[28] = checker4_expected_prev[28];
	end
	if (
		( checker4_expected_prev[29] !== 1'bx ) && ( checker4_prev[29] !== checker4_expected_prev[29] )
		&& ((checker4_expected_prev[29] !== last_checker4_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[29] = checker4_expected_prev[29];
	end
	if (
		( checker4_expected_prev[30] !== 1'bx ) && ( checker4_prev[30] !== checker4_expected_prev[30] )
		&& ((checker4_expected_prev[30] !== last_checker4_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[30] = checker4_expected_prev[30];
	end
	if (
		( checker4_expected_prev[31] !== 1'bx ) && ( checker4_prev[31] !== checker4_expected_prev[31] )
		&& ((checker4_expected_prev[31] !== last_checker4_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port checker4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", checker4_expected_prev);
		$display ("     Real value = %b", checker4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_checker4_exp[31] = checker4_expected_prev[31];
	end
	if (
		( ldStall_check_expected_prev !== 1'bx ) && ( ldStall_check_prev !== ldStall_check_expected_prev )
		&& ((ldStall_check_expected_prev !== last_ldStall_check_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ldStall_check :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ldStall_check_expected_prev);
		$display ("     Real value = %b", ldStall_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ldStall_check_exp = ldStall_check_expected_prev;
	end
	if (
		( o_insn_vld_expected_prev !== 1'bx ) && ( o_insn_vld_prev !== o_insn_vld_expected_prev )
		&& ((o_insn_vld_expected_prev !== last_o_insn_vld_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_insn_vld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_insn_vld_expected_prev);
		$display ("     Real value = %b", o_insn_vld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_o_insn_vld_exp = o_insn_vld_expected_prev;
	end
	if (
		( o_io_hex0_expected_prev[0] !== 1'bx ) && ( o_io_hex0_prev[0] !== o_io_hex0_expected_prev[0] )
		&& ((o_io_hex0_expected_prev[0] !== last_o_io_hex0_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex0_expected_prev);
		$display ("     Real value = %b", o_io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_io_hex0_exp[0] = o_io_hex0_expected_prev[0];
	end
	if (
		( o_io_hex0_expected_prev[1] !== 1'bx ) && ( o_io_hex0_prev[1] !== o_io_hex0_expected_prev[1] )
		&& ((o_io_hex0_expected_prev[1] !== last_o_io_hex0_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex0_expected_prev);
		$display ("     Real value = %b", o_io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_io_hex0_exp[1] = o_io_hex0_expected_prev[1];
	end
	if (
		( o_io_hex0_expected_prev[2] !== 1'bx ) && ( o_io_hex0_prev[2] !== o_io_hex0_expected_prev[2] )
		&& ((o_io_hex0_expected_prev[2] !== last_o_io_hex0_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex0_expected_prev);
		$display ("     Real value = %b", o_io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_io_hex0_exp[2] = o_io_hex0_expected_prev[2];
	end
	if (
		( o_io_hex0_expected_prev[3] !== 1'bx ) && ( o_io_hex0_prev[3] !== o_io_hex0_expected_prev[3] )
		&& ((o_io_hex0_expected_prev[3] !== last_o_io_hex0_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex0_expected_prev);
		$display ("     Real value = %b", o_io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_io_hex0_exp[3] = o_io_hex0_expected_prev[3];
	end
	if (
		( o_io_hex0_expected_prev[4] !== 1'bx ) && ( o_io_hex0_prev[4] !== o_io_hex0_expected_prev[4] )
		&& ((o_io_hex0_expected_prev[4] !== last_o_io_hex0_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex0_expected_prev);
		$display ("     Real value = %b", o_io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_io_hex0_exp[4] = o_io_hex0_expected_prev[4];
	end
	if (
		( o_io_hex0_expected_prev[5] !== 1'bx ) && ( o_io_hex0_prev[5] !== o_io_hex0_expected_prev[5] )
		&& ((o_io_hex0_expected_prev[5] !== last_o_io_hex0_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex0_expected_prev);
		$display ("     Real value = %b", o_io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_io_hex0_exp[5] = o_io_hex0_expected_prev[5];
	end
	if (
		( o_io_hex0_expected_prev[6] !== 1'bx ) && ( o_io_hex0_prev[6] !== o_io_hex0_expected_prev[6] )
		&& ((o_io_hex0_expected_prev[6] !== last_o_io_hex0_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex0_expected_prev);
		$display ("     Real value = %b", o_io_hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_o_io_hex0_exp[6] = o_io_hex0_expected_prev[6];
	end
	if (
		( o_io_hex1_expected_prev[0] !== 1'bx ) && ( o_io_hex1_prev[0] !== o_io_hex1_expected_prev[0] )
		&& ((o_io_hex1_expected_prev[0] !== last_o_io_hex1_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex1_expected_prev);
		$display ("     Real value = %b", o_io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_o_io_hex1_exp[0] = o_io_hex1_expected_prev[0];
	end
	if (
		( o_io_hex1_expected_prev[1] !== 1'bx ) && ( o_io_hex1_prev[1] !== o_io_hex1_expected_prev[1] )
		&& ((o_io_hex1_expected_prev[1] !== last_o_io_hex1_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex1_expected_prev);
		$display ("     Real value = %b", o_io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_o_io_hex1_exp[1] = o_io_hex1_expected_prev[1];
	end
	if (
		( o_io_hex1_expected_prev[2] !== 1'bx ) && ( o_io_hex1_prev[2] !== o_io_hex1_expected_prev[2] )
		&& ((o_io_hex1_expected_prev[2] !== last_o_io_hex1_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex1_expected_prev);
		$display ("     Real value = %b", o_io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_o_io_hex1_exp[2] = o_io_hex1_expected_prev[2];
	end
	if (
		( o_io_hex1_expected_prev[3] !== 1'bx ) && ( o_io_hex1_prev[3] !== o_io_hex1_expected_prev[3] )
		&& ((o_io_hex1_expected_prev[3] !== last_o_io_hex1_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex1_expected_prev);
		$display ("     Real value = %b", o_io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_o_io_hex1_exp[3] = o_io_hex1_expected_prev[3];
	end
	if (
		( o_io_hex1_expected_prev[4] !== 1'bx ) && ( o_io_hex1_prev[4] !== o_io_hex1_expected_prev[4] )
		&& ((o_io_hex1_expected_prev[4] !== last_o_io_hex1_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex1_expected_prev);
		$display ("     Real value = %b", o_io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_o_io_hex1_exp[4] = o_io_hex1_expected_prev[4];
	end
	if (
		( o_io_hex1_expected_prev[5] !== 1'bx ) && ( o_io_hex1_prev[5] !== o_io_hex1_expected_prev[5] )
		&& ((o_io_hex1_expected_prev[5] !== last_o_io_hex1_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex1_expected_prev);
		$display ("     Real value = %b", o_io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_o_io_hex1_exp[5] = o_io_hex1_expected_prev[5];
	end
	if (
		( o_io_hex1_expected_prev[6] !== 1'bx ) && ( o_io_hex1_prev[6] !== o_io_hex1_expected_prev[6] )
		&& ((o_io_hex1_expected_prev[6] !== last_o_io_hex1_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex1_expected_prev);
		$display ("     Real value = %b", o_io_hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_o_io_hex1_exp[6] = o_io_hex1_expected_prev[6];
	end
	if (
		( o_io_hex2_expected_prev[0] !== 1'bx ) && ( o_io_hex2_prev[0] !== o_io_hex2_expected_prev[0] )
		&& ((o_io_hex2_expected_prev[0] !== last_o_io_hex2_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex2_expected_prev);
		$display ("     Real value = %b", o_io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o_io_hex2_exp[0] = o_io_hex2_expected_prev[0];
	end
	if (
		( o_io_hex2_expected_prev[1] !== 1'bx ) && ( o_io_hex2_prev[1] !== o_io_hex2_expected_prev[1] )
		&& ((o_io_hex2_expected_prev[1] !== last_o_io_hex2_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex2_expected_prev);
		$display ("     Real value = %b", o_io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o_io_hex2_exp[1] = o_io_hex2_expected_prev[1];
	end
	if (
		( o_io_hex2_expected_prev[2] !== 1'bx ) && ( o_io_hex2_prev[2] !== o_io_hex2_expected_prev[2] )
		&& ((o_io_hex2_expected_prev[2] !== last_o_io_hex2_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex2_expected_prev);
		$display ("     Real value = %b", o_io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o_io_hex2_exp[2] = o_io_hex2_expected_prev[2];
	end
	if (
		( o_io_hex2_expected_prev[3] !== 1'bx ) && ( o_io_hex2_prev[3] !== o_io_hex2_expected_prev[3] )
		&& ((o_io_hex2_expected_prev[3] !== last_o_io_hex2_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex2_expected_prev);
		$display ("     Real value = %b", o_io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o_io_hex2_exp[3] = o_io_hex2_expected_prev[3];
	end
	if (
		( o_io_hex2_expected_prev[4] !== 1'bx ) && ( o_io_hex2_prev[4] !== o_io_hex2_expected_prev[4] )
		&& ((o_io_hex2_expected_prev[4] !== last_o_io_hex2_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex2_expected_prev);
		$display ("     Real value = %b", o_io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o_io_hex2_exp[4] = o_io_hex2_expected_prev[4];
	end
	if (
		( o_io_hex2_expected_prev[5] !== 1'bx ) && ( o_io_hex2_prev[5] !== o_io_hex2_expected_prev[5] )
		&& ((o_io_hex2_expected_prev[5] !== last_o_io_hex2_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex2_expected_prev);
		$display ("     Real value = %b", o_io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o_io_hex2_exp[5] = o_io_hex2_expected_prev[5];
	end
	if (
		( o_io_hex2_expected_prev[6] !== 1'bx ) && ( o_io_hex2_prev[6] !== o_io_hex2_expected_prev[6] )
		&& ((o_io_hex2_expected_prev[6] !== last_o_io_hex2_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex2_expected_prev);
		$display ("     Real value = %b", o_io_hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_o_io_hex2_exp[6] = o_io_hex2_expected_prev[6];
	end
	if (
		( o_io_hex3_expected_prev[0] !== 1'bx ) && ( o_io_hex3_prev[0] !== o_io_hex3_expected_prev[0] )
		&& ((o_io_hex3_expected_prev[0] !== last_o_io_hex3_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex3_expected_prev);
		$display ("     Real value = %b", o_io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_io_hex3_exp[0] = o_io_hex3_expected_prev[0];
	end
	if (
		( o_io_hex3_expected_prev[1] !== 1'bx ) && ( o_io_hex3_prev[1] !== o_io_hex3_expected_prev[1] )
		&& ((o_io_hex3_expected_prev[1] !== last_o_io_hex3_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex3_expected_prev);
		$display ("     Real value = %b", o_io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_io_hex3_exp[1] = o_io_hex3_expected_prev[1];
	end
	if (
		( o_io_hex3_expected_prev[2] !== 1'bx ) && ( o_io_hex3_prev[2] !== o_io_hex3_expected_prev[2] )
		&& ((o_io_hex3_expected_prev[2] !== last_o_io_hex3_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex3_expected_prev);
		$display ("     Real value = %b", o_io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_io_hex3_exp[2] = o_io_hex3_expected_prev[2];
	end
	if (
		( o_io_hex3_expected_prev[3] !== 1'bx ) && ( o_io_hex3_prev[3] !== o_io_hex3_expected_prev[3] )
		&& ((o_io_hex3_expected_prev[3] !== last_o_io_hex3_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex3_expected_prev);
		$display ("     Real value = %b", o_io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_io_hex3_exp[3] = o_io_hex3_expected_prev[3];
	end
	if (
		( o_io_hex3_expected_prev[4] !== 1'bx ) && ( o_io_hex3_prev[4] !== o_io_hex3_expected_prev[4] )
		&& ((o_io_hex3_expected_prev[4] !== last_o_io_hex3_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex3_expected_prev);
		$display ("     Real value = %b", o_io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_io_hex3_exp[4] = o_io_hex3_expected_prev[4];
	end
	if (
		( o_io_hex3_expected_prev[5] !== 1'bx ) && ( o_io_hex3_prev[5] !== o_io_hex3_expected_prev[5] )
		&& ((o_io_hex3_expected_prev[5] !== last_o_io_hex3_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex3_expected_prev);
		$display ("     Real value = %b", o_io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_io_hex3_exp[5] = o_io_hex3_expected_prev[5];
	end
	if (
		( o_io_hex3_expected_prev[6] !== 1'bx ) && ( o_io_hex3_prev[6] !== o_io_hex3_expected_prev[6] )
		&& ((o_io_hex3_expected_prev[6] !== last_o_io_hex3_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex3_expected_prev);
		$display ("     Real value = %b", o_io_hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_o_io_hex3_exp[6] = o_io_hex3_expected_prev[6];
	end
	if (
		( o_io_hex4_expected_prev[0] !== 1'bx ) && ( o_io_hex4_prev[0] !== o_io_hex4_expected_prev[0] )
		&& ((o_io_hex4_expected_prev[0] !== last_o_io_hex4_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex4_expected_prev);
		$display ("     Real value = %b", o_io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_io_hex4_exp[0] = o_io_hex4_expected_prev[0];
	end
	if (
		( o_io_hex4_expected_prev[1] !== 1'bx ) && ( o_io_hex4_prev[1] !== o_io_hex4_expected_prev[1] )
		&& ((o_io_hex4_expected_prev[1] !== last_o_io_hex4_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex4_expected_prev);
		$display ("     Real value = %b", o_io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_io_hex4_exp[1] = o_io_hex4_expected_prev[1];
	end
	if (
		( o_io_hex4_expected_prev[2] !== 1'bx ) && ( o_io_hex4_prev[2] !== o_io_hex4_expected_prev[2] )
		&& ((o_io_hex4_expected_prev[2] !== last_o_io_hex4_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex4_expected_prev);
		$display ("     Real value = %b", o_io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_io_hex4_exp[2] = o_io_hex4_expected_prev[2];
	end
	if (
		( o_io_hex4_expected_prev[3] !== 1'bx ) && ( o_io_hex4_prev[3] !== o_io_hex4_expected_prev[3] )
		&& ((o_io_hex4_expected_prev[3] !== last_o_io_hex4_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex4_expected_prev);
		$display ("     Real value = %b", o_io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_io_hex4_exp[3] = o_io_hex4_expected_prev[3];
	end
	if (
		( o_io_hex4_expected_prev[4] !== 1'bx ) && ( o_io_hex4_prev[4] !== o_io_hex4_expected_prev[4] )
		&& ((o_io_hex4_expected_prev[4] !== last_o_io_hex4_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex4_expected_prev);
		$display ("     Real value = %b", o_io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_io_hex4_exp[4] = o_io_hex4_expected_prev[4];
	end
	if (
		( o_io_hex4_expected_prev[5] !== 1'bx ) && ( o_io_hex4_prev[5] !== o_io_hex4_expected_prev[5] )
		&& ((o_io_hex4_expected_prev[5] !== last_o_io_hex4_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex4_expected_prev);
		$display ("     Real value = %b", o_io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_io_hex4_exp[5] = o_io_hex4_expected_prev[5];
	end
	if (
		( o_io_hex4_expected_prev[6] !== 1'bx ) && ( o_io_hex4_prev[6] !== o_io_hex4_expected_prev[6] )
		&& ((o_io_hex4_expected_prev[6] !== last_o_io_hex4_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex4_expected_prev);
		$display ("     Real value = %b", o_io_hex4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_o_io_hex4_exp[6] = o_io_hex4_expected_prev[6];
	end
	if (
		( o_io_hex5_expected_prev[0] !== 1'bx ) && ( o_io_hex5_prev[0] !== o_io_hex5_expected_prev[0] )
		&& ((o_io_hex5_expected_prev[0] !== last_o_io_hex5_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex5_expected_prev);
		$display ("     Real value = %b", o_io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_o_io_hex5_exp[0] = o_io_hex5_expected_prev[0];
	end
	if (
		( o_io_hex5_expected_prev[1] !== 1'bx ) && ( o_io_hex5_prev[1] !== o_io_hex5_expected_prev[1] )
		&& ((o_io_hex5_expected_prev[1] !== last_o_io_hex5_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex5_expected_prev);
		$display ("     Real value = %b", o_io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_o_io_hex5_exp[1] = o_io_hex5_expected_prev[1];
	end
	if (
		( o_io_hex5_expected_prev[2] !== 1'bx ) && ( o_io_hex5_prev[2] !== o_io_hex5_expected_prev[2] )
		&& ((o_io_hex5_expected_prev[2] !== last_o_io_hex5_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex5_expected_prev);
		$display ("     Real value = %b", o_io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_o_io_hex5_exp[2] = o_io_hex5_expected_prev[2];
	end
	if (
		( o_io_hex5_expected_prev[3] !== 1'bx ) && ( o_io_hex5_prev[3] !== o_io_hex5_expected_prev[3] )
		&& ((o_io_hex5_expected_prev[3] !== last_o_io_hex5_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex5_expected_prev);
		$display ("     Real value = %b", o_io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_o_io_hex5_exp[3] = o_io_hex5_expected_prev[3];
	end
	if (
		( o_io_hex5_expected_prev[4] !== 1'bx ) && ( o_io_hex5_prev[4] !== o_io_hex5_expected_prev[4] )
		&& ((o_io_hex5_expected_prev[4] !== last_o_io_hex5_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex5_expected_prev);
		$display ("     Real value = %b", o_io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_o_io_hex5_exp[4] = o_io_hex5_expected_prev[4];
	end
	if (
		( o_io_hex5_expected_prev[5] !== 1'bx ) && ( o_io_hex5_prev[5] !== o_io_hex5_expected_prev[5] )
		&& ((o_io_hex5_expected_prev[5] !== last_o_io_hex5_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex5_expected_prev);
		$display ("     Real value = %b", o_io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_o_io_hex5_exp[5] = o_io_hex5_expected_prev[5];
	end
	if (
		( o_io_hex5_expected_prev[6] !== 1'bx ) && ( o_io_hex5_prev[6] !== o_io_hex5_expected_prev[6] )
		&& ((o_io_hex5_expected_prev[6] !== last_o_io_hex5_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex5_expected_prev);
		$display ("     Real value = %b", o_io_hex5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_o_io_hex5_exp[6] = o_io_hex5_expected_prev[6];
	end
	if (
		( o_io_hex6_expected_prev[0] !== 1'bx ) && ( o_io_hex6_prev[0] !== o_io_hex6_expected_prev[0] )
		&& ((o_io_hex6_expected_prev[0] !== last_o_io_hex6_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex6[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex6_expected_prev);
		$display ("     Real value = %b", o_io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_o_io_hex6_exp[0] = o_io_hex6_expected_prev[0];
	end
	if (
		( o_io_hex6_expected_prev[1] !== 1'bx ) && ( o_io_hex6_prev[1] !== o_io_hex6_expected_prev[1] )
		&& ((o_io_hex6_expected_prev[1] !== last_o_io_hex6_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex6[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex6_expected_prev);
		$display ("     Real value = %b", o_io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_o_io_hex6_exp[1] = o_io_hex6_expected_prev[1];
	end
	if (
		( o_io_hex6_expected_prev[2] !== 1'bx ) && ( o_io_hex6_prev[2] !== o_io_hex6_expected_prev[2] )
		&& ((o_io_hex6_expected_prev[2] !== last_o_io_hex6_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex6[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex6_expected_prev);
		$display ("     Real value = %b", o_io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_o_io_hex6_exp[2] = o_io_hex6_expected_prev[2];
	end
	if (
		( o_io_hex6_expected_prev[3] !== 1'bx ) && ( o_io_hex6_prev[3] !== o_io_hex6_expected_prev[3] )
		&& ((o_io_hex6_expected_prev[3] !== last_o_io_hex6_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex6[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex6_expected_prev);
		$display ("     Real value = %b", o_io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_o_io_hex6_exp[3] = o_io_hex6_expected_prev[3];
	end
	if (
		( o_io_hex6_expected_prev[4] !== 1'bx ) && ( o_io_hex6_prev[4] !== o_io_hex6_expected_prev[4] )
		&& ((o_io_hex6_expected_prev[4] !== last_o_io_hex6_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex6[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex6_expected_prev);
		$display ("     Real value = %b", o_io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_o_io_hex6_exp[4] = o_io_hex6_expected_prev[4];
	end
	if (
		( o_io_hex6_expected_prev[5] !== 1'bx ) && ( o_io_hex6_prev[5] !== o_io_hex6_expected_prev[5] )
		&& ((o_io_hex6_expected_prev[5] !== last_o_io_hex6_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex6[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex6_expected_prev);
		$display ("     Real value = %b", o_io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_o_io_hex6_exp[5] = o_io_hex6_expected_prev[5];
	end
	if (
		( o_io_hex6_expected_prev[6] !== 1'bx ) && ( o_io_hex6_prev[6] !== o_io_hex6_expected_prev[6] )
		&& ((o_io_hex6_expected_prev[6] !== last_o_io_hex6_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex6[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex6_expected_prev);
		$display ("     Real value = %b", o_io_hex6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_o_io_hex6_exp[6] = o_io_hex6_expected_prev[6];
	end
	if (
		( o_io_hex7_expected_prev[0] !== 1'bx ) && ( o_io_hex7_prev[0] !== o_io_hex7_expected_prev[0] )
		&& ((o_io_hex7_expected_prev[0] !== last_o_io_hex7_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex7_expected_prev);
		$display ("     Real value = %b", o_io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_o_io_hex7_exp[0] = o_io_hex7_expected_prev[0];
	end
	if (
		( o_io_hex7_expected_prev[1] !== 1'bx ) && ( o_io_hex7_prev[1] !== o_io_hex7_expected_prev[1] )
		&& ((o_io_hex7_expected_prev[1] !== last_o_io_hex7_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex7_expected_prev);
		$display ("     Real value = %b", o_io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_o_io_hex7_exp[1] = o_io_hex7_expected_prev[1];
	end
	if (
		( o_io_hex7_expected_prev[2] !== 1'bx ) && ( o_io_hex7_prev[2] !== o_io_hex7_expected_prev[2] )
		&& ((o_io_hex7_expected_prev[2] !== last_o_io_hex7_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex7_expected_prev);
		$display ("     Real value = %b", o_io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_o_io_hex7_exp[2] = o_io_hex7_expected_prev[2];
	end
	if (
		( o_io_hex7_expected_prev[3] !== 1'bx ) && ( o_io_hex7_prev[3] !== o_io_hex7_expected_prev[3] )
		&& ((o_io_hex7_expected_prev[3] !== last_o_io_hex7_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex7_expected_prev);
		$display ("     Real value = %b", o_io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_o_io_hex7_exp[3] = o_io_hex7_expected_prev[3];
	end
	if (
		( o_io_hex7_expected_prev[4] !== 1'bx ) && ( o_io_hex7_prev[4] !== o_io_hex7_expected_prev[4] )
		&& ((o_io_hex7_expected_prev[4] !== last_o_io_hex7_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex7_expected_prev);
		$display ("     Real value = %b", o_io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_o_io_hex7_exp[4] = o_io_hex7_expected_prev[4];
	end
	if (
		( o_io_hex7_expected_prev[5] !== 1'bx ) && ( o_io_hex7_prev[5] !== o_io_hex7_expected_prev[5] )
		&& ((o_io_hex7_expected_prev[5] !== last_o_io_hex7_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex7_expected_prev);
		$display ("     Real value = %b", o_io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_o_io_hex7_exp[5] = o_io_hex7_expected_prev[5];
	end
	if (
		( o_io_hex7_expected_prev[6] !== 1'bx ) && ( o_io_hex7_prev[6] !== o_io_hex7_expected_prev[6] )
		&& ((o_io_hex7_expected_prev[6] !== last_o_io_hex7_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_hex7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_hex7_expected_prev);
		$display ("     Real value = %b", o_io_hex7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_o_io_hex7_exp[6] = o_io_hex7_expected_prev[6];
	end
	if (
		( o_io_lcd_expected_prev[0] !== 1'bx ) && ( o_io_lcd_prev[0] !== o_io_lcd_expected_prev[0] )
		&& ((o_io_lcd_expected_prev[0] !== last_o_io_lcd_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[0] = o_io_lcd_expected_prev[0];
	end
	if (
		( o_io_lcd_expected_prev[1] !== 1'bx ) && ( o_io_lcd_prev[1] !== o_io_lcd_expected_prev[1] )
		&& ((o_io_lcd_expected_prev[1] !== last_o_io_lcd_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[1] = o_io_lcd_expected_prev[1];
	end
	if (
		( o_io_lcd_expected_prev[2] !== 1'bx ) && ( o_io_lcd_prev[2] !== o_io_lcd_expected_prev[2] )
		&& ((o_io_lcd_expected_prev[2] !== last_o_io_lcd_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[2] = o_io_lcd_expected_prev[2];
	end
	if (
		( o_io_lcd_expected_prev[3] !== 1'bx ) && ( o_io_lcd_prev[3] !== o_io_lcd_expected_prev[3] )
		&& ((o_io_lcd_expected_prev[3] !== last_o_io_lcd_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[3] = o_io_lcd_expected_prev[3];
	end
	if (
		( o_io_lcd_expected_prev[4] !== 1'bx ) && ( o_io_lcd_prev[4] !== o_io_lcd_expected_prev[4] )
		&& ((o_io_lcd_expected_prev[4] !== last_o_io_lcd_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[4] = o_io_lcd_expected_prev[4];
	end
	if (
		( o_io_lcd_expected_prev[5] !== 1'bx ) && ( o_io_lcd_prev[5] !== o_io_lcd_expected_prev[5] )
		&& ((o_io_lcd_expected_prev[5] !== last_o_io_lcd_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[5] = o_io_lcd_expected_prev[5];
	end
	if (
		( o_io_lcd_expected_prev[6] !== 1'bx ) && ( o_io_lcd_prev[6] !== o_io_lcd_expected_prev[6] )
		&& ((o_io_lcd_expected_prev[6] !== last_o_io_lcd_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[6] = o_io_lcd_expected_prev[6];
	end
	if (
		( o_io_lcd_expected_prev[7] !== 1'bx ) && ( o_io_lcd_prev[7] !== o_io_lcd_expected_prev[7] )
		&& ((o_io_lcd_expected_prev[7] !== last_o_io_lcd_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[7] = o_io_lcd_expected_prev[7];
	end
	if (
		( o_io_lcd_expected_prev[8] !== 1'bx ) && ( o_io_lcd_prev[8] !== o_io_lcd_expected_prev[8] )
		&& ((o_io_lcd_expected_prev[8] !== last_o_io_lcd_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[8] = o_io_lcd_expected_prev[8];
	end
	if (
		( o_io_lcd_expected_prev[9] !== 1'bx ) && ( o_io_lcd_prev[9] !== o_io_lcd_expected_prev[9] )
		&& ((o_io_lcd_expected_prev[9] !== last_o_io_lcd_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[9] = o_io_lcd_expected_prev[9];
	end
	if (
		( o_io_lcd_expected_prev[10] !== 1'bx ) && ( o_io_lcd_prev[10] !== o_io_lcd_expected_prev[10] )
		&& ((o_io_lcd_expected_prev[10] !== last_o_io_lcd_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[10] = o_io_lcd_expected_prev[10];
	end
	if (
		( o_io_lcd_expected_prev[11] !== 1'bx ) && ( o_io_lcd_prev[11] !== o_io_lcd_expected_prev[11] )
		&& ((o_io_lcd_expected_prev[11] !== last_o_io_lcd_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[11] = o_io_lcd_expected_prev[11];
	end
	if (
		( o_io_lcd_expected_prev[12] !== 1'bx ) && ( o_io_lcd_prev[12] !== o_io_lcd_expected_prev[12] )
		&& ((o_io_lcd_expected_prev[12] !== last_o_io_lcd_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[12] = o_io_lcd_expected_prev[12];
	end
	if (
		( o_io_lcd_expected_prev[13] !== 1'bx ) && ( o_io_lcd_prev[13] !== o_io_lcd_expected_prev[13] )
		&& ((o_io_lcd_expected_prev[13] !== last_o_io_lcd_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[13] = o_io_lcd_expected_prev[13];
	end
	if (
		( o_io_lcd_expected_prev[14] !== 1'bx ) && ( o_io_lcd_prev[14] !== o_io_lcd_expected_prev[14] )
		&& ((o_io_lcd_expected_prev[14] !== last_o_io_lcd_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[14] = o_io_lcd_expected_prev[14];
	end
	if (
		( o_io_lcd_expected_prev[15] !== 1'bx ) && ( o_io_lcd_prev[15] !== o_io_lcd_expected_prev[15] )
		&& ((o_io_lcd_expected_prev[15] !== last_o_io_lcd_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[15] = o_io_lcd_expected_prev[15];
	end
	if (
		( o_io_lcd_expected_prev[16] !== 1'bx ) && ( o_io_lcd_prev[16] !== o_io_lcd_expected_prev[16] )
		&& ((o_io_lcd_expected_prev[16] !== last_o_io_lcd_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[16] = o_io_lcd_expected_prev[16];
	end
	if (
		( o_io_lcd_expected_prev[17] !== 1'bx ) && ( o_io_lcd_prev[17] !== o_io_lcd_expected_prev[17] )
		&& ((o_io_lcd_expected_prev[17] !== last_o_io_lcd_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[17] = o_io_lcd_expected_prev[17];
	end
	if (
		( o_io_lcd_expected_prev[18] !== 1'bx ) && ( o_io_lcd_prev[18] !== o_io_lcd_expected_prev[18] )
		&& ((o_io_lcd_expected_prev[18] !== last_o_io_lcd_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[18] = o_io_lcd_expected_prev[18];
	end
	if (
		( o_io_lcd_expected_prev[19] !== 1'bx ) && ( o_io_lcd_prev[19] !== o_io_lcd_expected_prev[19] )
		&& ((o_io_lcd_expected_prev[19] !== last_o_io_lcd_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[19] = o_io_lcd_expected_prev[19];
	end
	if (
		( o_io_lcd_expected_prev[20] !== 1'bx ) && ( o_io_lcd_prev[20] !== o_io_lcd_expected_prev[20] )
		&& ((o_io_lcd_expected_prev[20] !== last_o_io_lcd_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[20] = o_io_lcd_expected_prev[20];
	end
	if (
		( o_io_lcd_expected_prev[21] !== 1'bx ) && ( o_io_lcd_prev[21] !== o_io_lcd_expected_prev[21] )
		&& ((o_io_lcd_expected_prev[21] !== last_o_io_lcd_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[21] = o_io_lcd_expected_prev[21];
	end
	if (
		( o_io_lcd_expected_prev[22] !== 1'bx ) && ( o_io_lcd_prev[22] !== o_io_lcd_expected_prev[22] )
		&& ((o_io_lcd_expected_prev[22] !== last_o_io_lcd_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[22] = o_io_lcd_expected_prev[22];
	end
	if (
		( o_io_lcd_expected_prev[23] !== 1'bx ) && ( o_io_lcd_prev[23] !== o_io_lcd_expected_prev[23] )
		&& ((o_io_lcd_expected_prev[23] !== last_o_io_lcd_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[23] = o_io_lcd_expected_prev[23];
	end
	if (
		( o_io_lcd_expected_prev[24] !== 1'bx ) && ( o_io_lcd_prev[24] !== o_io_lcd_expected_prev[24] )
		&& ((o_io_lcd_expected_prev[24] !== last_o_io_lcd_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[24] = o_io_lcd_expected_prev[24];
	end
	if (
		( o_io_lcd_expected_prev[25] !== 1'bx ) && ( o_io_lcd_prev[25] !== o_io_lcd_expected_prev[25] )
		&& ((o_io_lcd_expected_prev[25] !== last_o_io_lcd_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[25] = o_io_lcd_expected_prev[25];
	end
	if (
		( o_io_lcd_expected_prev[26] !== 1'bx ) && ( o_io_lcd_prev[26] !== o_io_lcd_expected_prev[26] )
		&& ((o_io_lcd_expected_prev[26] !== last_o_io_lcd_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[26] = o_io_lcd_expected_prev[26];
	end
	if (
		( o_io_lcd_expected_prev[27] !== 1'bx ) && ( o_io_lcd_prev[27] !== o_io_lcd_expected_prev[27] )
		&& ((o_io_lcd_expected_prev[27] !== last_o_io_lcd_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[27] = o_io_lcd_expected_prev[27];
	end
	if (
		( o_io_lcd_expected_prev[28] !== 1'bx ) && ( o_io_lcd_prev[28] !== o_io_lcd_expected_prev[28] )
		&& ((o_io_lcd_expected_prev[28] !== last_o_io_lcd_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[28] = o_io_lcd_expected_prev[28];
	end
	if (
		( o_io_lcd_expected_prev[29] !== 1'bx ) && ( o_io_lcd_prev[29] !== o_io_lcd_expected_prev[29] )
		&& ((o_io_lcd_expected_prev[29] !== last_o_io_lcd_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[29] = o_io_lcd_expected_prev[29];
	end
	if (
		( o_io_lcd_expected_prev[30] !== 1'bx ) && ( o_io_lcd_prev[30] !== o_io_lcd_expected_prev[30] )
		&& ((o_io_lcd_expected_prev[30] !== last_o_io_lcd_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[30] = o_io_lcd_expected_prev[30];
	end
	if (
		( o_io_lcd_expected_prev[31] !== 1'bx ) && ( o_io_lcd_prev[31] !== o_io_lcd_expected_prev[31] )
		&& ((o_io_lcd_expected_prev[31] !== last_o_io_lcd_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_lcd[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_lcd_expected_prev);
		$display ("     Real value = %b", o_io_lcd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_o_io_lcd_exp[31] = o_io_lcd_expected_prev[31];
	end
	if (
		( o_io_ledg_expected_prev[0] !== 1'bx ) && ( o_io_ledg_prev[0] !== o_io_ledg_expected_prev[0] )
		&& ((o_io_ledg_expected_prev[0] !== last_o_io_ledg_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[0] = o_io_ledg_expected_prev[0];
	end
	if (
		( o_io_ledg_expected_prev[1] !== 1'bx ) && ( o_io_ledg_prev[1] !== o_io_ledg_expected_prev[1] )
		&& ((o_io_ledg_expected_prev[1] !== last_o_io_ledg_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[1] = o_io_ledg_expected_prev[1];
	end
	if (
		( o_io_ledg_expected_prev[2] !== 1'bx ) && ( o_io_ledg_prev[2] !== o_io_ledg_expected_prev[2] )
		&& ((o_io_ledg_expected_prev[2] !== last_o_io_ledg_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[2] = o_io_ledg_expected_prev[2];
	end
	if (
		( o_io_ledg_expected_prev[3] !== 1'bx ) && ( o_io_ledg_prev[3] !== o_io_ledg_expected_prev[3] )
		&& ((o_io_ledg_expected_prev[3] !== last_o_io_ledg_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[3] = o_io_ledg_expected_prev[3];
	end
	if (
		( o_io_ledg_expected_prev[4] !== 1'bx ) && ( o_io_ledg_prev[4] !== o_io_ledg_expected_prev[4] )
		&& ((o_io_ledg_expected_prev[4] !== last_o_io_ledg_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[4] = o_io_ledg_expected_prev[4];
	end
	if (
		( o_io_ledg_expected_prev[5] !== 1'bx ) && ( o_io_ledg_prev[5] !== o_io_ledg_expected_prev[5] )
		&& ((o_io_ledg_expected_prev[5] !== last_o_io_ledg_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[5] = o_io_ledg_expected_prev[5];
	end
	if (
		( o_io_ledg_expected_prev[6] !== 1'bx ) && ( o_io_ledg_prev[6] !== o_io_ledg_expected_prev[6] )
		&& ((o_io_ledg_expected_prev[6] !== last_o_io_ledg_exp[6]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[6] = o_io_ledg_expected_prev[6];
	end
	if (
		( o_io_ledg_expected_prev[7] !== 1'bx ) && ( o_io_ledg_prev[7] !== o_io_ledg_expected_prev[7] )
		&& ((o_io_ledg_expected_prev[7] !== last_o_io_ledg_exp[7]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[7] = o_io_ledg_expected_prev[7];
	end
	if (
		( o_io_ledg_expected_prev[8] !== 1'bx ) && ( o_io_ledg_prev[8] !== o_io_ledg_expected_prev[8] )
		&& ((o_io_ledg_expected_prev[8] !== last_o_io_ledg_exp[8]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[8] = o_io_ledg_expected_prev[8];
	end
	if (
		( o_io_ledg_expected_prev[9] !== 1'bx ) && ( o_io_ledg_prev[9] !== o_io_ledg_expected_prev[9] )
		&& ((o_io_ledg_expected_prev[9] !== last_o_io_ledg_exp[9]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[9] = o_io_ledg_expected_prev[9];
	end
	if (
		( o_io_ledg_expected_prev[10] !== 1'bx ) && ( o_io_ledg_prev[10] !== o_io_ledg_expected_prev[10] )
		&& ((o_io_ledg_expected_prev[10] !== last_o_io_ledg_exp[10]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[10] = o_io_ledg_expected_prev[10];
	end
	if (
		( o_io_ledg_expected_prev[11] !== 1'bx ) && ( o_io_ledg_prev[11] !== o_io_ledg_expected_prev[11] )
		&& ((o_io_ledg_expected_prev[11] !== last_o_io_ledg_exp[11]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[11] = o_io_ledg_expected_prev[11];
	end
	if (
		( o_io_ledg_expected_prev[12] !== 1'bx ) && ( o_io_ledg_prev[12] !== o_io_ledg_expected_prev[12] )
		&& ((o_io_ledg_expected_prev[12] !== last_o_io_ledg_exp[12]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[12] = o_io_ledg_expected_prev[12];
	end
	if (
		( o_io_ledg_expected_prev[13] !== 1'bx ) && ( o_io_ledg_prev[13] !== o_io_ledg_expected_prev[13] )
		&& ((o_io_ledg_expected_prev[13] !== last_o_io_ledg_exp[13]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[13] = o_io_ledg_expected_prev[13];
	end
	if (
		( o_io_ledg_expected_prev[14] !== 1'bx ) && ( o_io_ledg_prev[14] !== o_io_ledg_expected_prev[14] )
		&& ((o_io_ledg_expected_prev[14] !== last_o_io_ledg_exp[14]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[14] = o_io_ledg_expected_prev[14];
	end
	if (
		( o_io_ledg_expected_prev[15] !== 1'bx ) && ( o_io_ledg_prev[15] !== o_io_ledg_expected_prev[15] )
		&& ((o_io_ledg_expected_prev[15] !== last_o_io_ledg_exp[15]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[15] = o_io_ledg_expected_prev[15];
	end
	if (
		( o_io_ledg_expected_prev[16] !== 1'bx ) && ( o_io_ledg_prev[16] !== o_io_ledg_expected_prev[16] )
		&& ((o_io_ledg_expected_prev[16] !== last_o_io_ledg_exp[16]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[16] = o_io_ledg_expected_prev[16];
	end
	if (
		( o_io_ledg_expected_prev[17] !== 1'bx ) && ( o_io_ledg_prev[17] !== o_io_ledg_expected_prev[17] )
		&& ((o_io_ledg_expected_prev[17] !== last_o_io_ledg_exp[17]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[17] = o_io_ledg_expected_prev[17];
	end
	if (
		( o_io_ledg_expected_prev[18] !== 1'bx ) && ( o_io_ledg_prev[18] !== o_io_ledg_expected_prev[18] )
		&& ((o_io_ledg_expected_prev[18] !== last_o_io_ledg_exp[18]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[18] = o_io_ledg_expected_prev[18];
	end
	if (
		( o_io_ledg_expected_prev[19] !== 1'bx ) && ( o_io_ledg_prev[19] !== o_io_ledg_expected_prev[19] )
		&& ((o_io_ledg_expected_prev[19] !== last_o_io_ledg_exp[19]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[19] = o_io_ledg_expected_prev[19];
	end
	if (
		( o_io_ledg_expected_prev[20] !== 1'bx ) && ( o_io_ledg_prev[20] !== o_io_ledg_expected_prev[20] )
		&& ((o_io_ledg_expected_prev[20] !== last_o_io_ledg_exp[20]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[20] = o_io_ledg_expected_prev[20];
	end
	if (
		( o_io_ledg_expected_prev[21] !== 1'bx ) && ( o_io_ledg_prev[21] !== o_io_ledg_expected_prev[21] )
		&& ((o_io_ledg_expected_prev[21] !== last_o_io_ledg_exp[21]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[21] = o_io_ledg_expected_prev[21];
	end
	if (
		( o_io_ledg_expected_prev[22] !== 1'bx ) && ( o_io_ledg_prev[22] !== o_io_ledg_expected_prev[22] )
		&& ((o_io_ledg_expected_prev[22] !== last_o_io_ledg_exp[22]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[22] = o_io_ledg_expected_prev[22];
	end
	if (
		( o_io_ledg_expected_prev[23] !== 1'bx ) && ( o_io_ledg_prev[23] !== o_io_ledg_expected_prev[23] )
		&& ((o_io_ledg_expected_prev[23] !== last_o_io_ledg_exp[23]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[23] = o_io_ledg_expected_prev[23];
	end
	if (
		( o_io_ledg_expected_prev[24] !== 1'bx ) && ( o_io_ledg_prev[24] !== o_io_ledg_expected_prev[24] )
		&& ((o_io_ledg_expected_prev[24] !== last_o_io_ledg_exp[24]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[24] = o_io_ledg_expected_prev[24];
	end
	if (
		( o_io_ledg_expected_prev[25] !== 1'bx ) && ( o_io_ledg_prev[25] !== o_io_ledg_expected_prev[25] )
		&& ((o_io_ledg_expected_prev[25] !== last_o_io_ledg_exp[25]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[25] = o_io_ledg_expected_prev[25];
	end
	if (
		( o_io_ledg_expected_prev[26] !== 1'bx ) && ( o_io_ledg_prev[26] !== o_io_ledg_expected_prev[26] )
		&& ((o_io_ledg_expected_prev[26] !== last_o_io_ledg_exp[26]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[26] = o_io_ledg_expected_prev[26];
	end
	if (
		( o_io_ledg_expected_prev[27] !== 1'bx ) && ( o_io_ledg_prev[27] !== o_io_ledg_expected_prev[27] )
		&& ((o_io_ledg_expected_prev[27] !== last_o_io_ledg_exp[27]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[27] = o_io_ledg_expected_prev[27];
	end
	if (
		( o_io_ledg_expected_prev[28] !== 1'bx ) && ( o_io_ledg_prev[28] !== o_io_ledg_expected_prev[28] )
		&& ((o_io_ledg_expected_prev[28] !== last_o_io_ledg_exp[28]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[28] = o_io_ledg_expected_prev[28];
	end
	if (
		( o_io_ledg_expected_prev[29] !== 1'bx ) && ( o_io_ledg_prev[29] !== o_io_ledg_expected_prev[29] )
		&& ((o_io_ledg_expected_prev[29] !== last_o_io_ledg_exp[29]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[29] = o_io_ledg_expected_prev[29];
	end
	if (
		( o_io_ledg_expected_prev[30] !== 1'bx ) && ( o_io_ledg_prev[30] !== o_io_ledg_expected_prev[30] )
		&& ((o_io_ledg_expected_prev[30] !== last_o_io_ledg_exp[30]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[30] = o_io_ledg_expected_prev[30];
	end
	if (
		( o_io_ledg_expected_prev[31] !== 1'bx ) && ( o_io_ledg_prev[31] !== o_io_ledg_expected_prev[31] )
		&& ((o_io_ledg_expected_prev[31] !== last_o_io_ledg_exp[31]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledg[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledg_expected_prev);
		$display ("     Real value = %b", o_io_ledg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_o_io_ledg_exp[31] = o_io_ledg_expected_prev[31];
	end
	if (
		( o_io_ledr_expected_prev[0] !== 1'bx ) && ( o_io_ledr_prev[0] !== o_io_ledr_expected_prev[0] )
		&& ((o_io_ledr_expected_prev[0] !== last_o_io_ledr_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[0] = o_io_ledr_expected_prev[0];
	end
	if (
		( o_io_ledr_expected_prev[1] !== 1'bx ) && ( o_io_ledr_prev[1] !== o_io_ledr_expected_prev[1] )
		&& ((o_io_ledr_expected_prev[1] !== last_o_io_ledr_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[1] = o_io_ledr_expected_prev[1];
	end
	if (
		( o_io_ledr_expected_prev[2] !== 1'bx ) && ( o_io_ledr_prev[2] !== o_io_ledr_expected_prev[2] )
		&& ((o_io_ledr_expected_prev[2] !== last_o_io_ledr_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[2] = o_io_ledr_expected_prev[2];
	end
	if (
		( o_io_ledr_expected_prev[3] !== 1'bx ) && ( o_io_ledr_prev[3] !== o_io_ledr_expected_prev[3] )
		&& ((o_io_ledr_expected_prev[3] !== last_o_io_ledr_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[3] = o_io_ledr_expected_prev[3];
	end
	if (
		( o_io_ledr_expected_prev[4] !== 1'bx ) && ( o_io_ledr_prev[4] !== o_io_ledr_expected_prev[4] )
		&& ((o_io_ledr_expected_prev[4] !== last_o_io_ledr_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[4] = o_io_ledr_expected_prev[4];
	end
	if (
		( o_io_ledr_expected_prev[5] !== 1'bx ) && ( o_io_ledr_prev[5] !== o_io_ledr_expected_prev[5] )
		&& ((o_io_ledr_expected_prev[5] !== last_o_io_ledr_exp[5]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[5] = o_io_ledr_expected_prev[5];
	end
	if (
		( o_io_ledr_expected_prev[6] !== 1'bx ) && ( o_io_ledr_prev[6] !== o_io_ledr_expected_prev[6] )
		&& ((o_io_ledr_expected_prev[6] !== last_o_io_ledr_exp[6]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[6] = o_io_ledr_expected_prev[6];
	end
	if (
		( o_io_ledr_expected_prev[7] !== 1'bx ) && ( o_io_ledr_prev[7] !== o_io_ledr_expected_prev[7] )
		&& ((o_io_ledr_expected_prev[7] !== last_o_io_ledr_exp[7]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[7] = o_io_ledr_expected_prev[7];
	end
	if (
		( o_io_ledr_expected_prev[8] !== 1'bx ) && ( o_io_ledr_prev[8] !== o_io_ledr_expected_prev[8] )
		&& ((o_io_ledr_expected_prev[8] !== last_o_io_ledr_exp[8]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[8] = o_io_ledr_expected_prev[8];
	end
	if (
		( o_io_ledr_expected_prev[9] !== 1'bx ) && ( o_io_ledr_prev[9] !== o_io_ledr_expected_prev[9] )
		&& ((o_io_ledr_expected_prev[9] !== last_o_io_ledr_exp[9]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[9] = o_io_ledr_expected_prev[9];
	end
	if (
		( o_io_ledr_expected_prev[10] !== 1'bx ) && ( o_io_ledr_prev[10] !== o_io_ledr_expected_prev[10] )
		&& ((o_io_ledr_expected_prev[10] !== last_o_io_ledr_exp[10]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[10] = o_io_ledr_expected_prev[10];
	end
	if (
		( o_io_ledr_expected_prev[11] !== 1'bx ) && ( o_io_ledr_prev[11] !== o_io_ledr_expected_prev[11] )
		&& ((o_io_ledr_expected_prev[11] !== last_o_io_ledr_exp[11]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[11] = o_io_ledr_expected_prev[11];
	end
	if (
		( o_io_ledr_expected_prev[12] !== 1'bx ) && ( o_io_ledr_prev[12] !== o_io_ledr_expected_prev[12] )
		&& ((o_io_ledr_expected_prev[12] !== last_o_io_ledr_exp[12]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[12] = o_io_ledr_expected_prev[12];
	end
	if (
		( o_io_ledr_expected_prev[13] !== 1'bx ) && ( o_io_ledr_prev[13] !== o_io_ledr_expected_prev[13] )
		&& ((o_io_ledr_expected_prev[13] !== last_o_io_ledr_exp[13]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[13] = o_io_ledr_expected_prev[13];
	end
	if (
		( o_io_ledr_expected_prev[14] !== 1'bx ) && ( o_io_ledr_prev[14] !== o_io_ledr_expected_prev[14] )
		&& ((o_io_ledr_expected_prev[14] !== last_o_io_ledr_exp[14]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[14] = o_io_ledr_expected_prev[14];
	end
	if (
		( o_io_ledr_expected_prev[15] !== 1'bx ) && ( o_io_ledr_prev[15] !== o_io_ledr_expected_prev[15] )
		&& ((o_io_ledr_expected_prev[15] !== last_o_io_ledr_exp[15]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[15] = o_io_ledr_expected_prev[15];
	end
	if (
		( o_io_ledr_expected_prev[16] !== 1'bx ) && ( o_io_ledr_prev[16] !== o_io_ledr_expected_prev[16] )
		&& ((o_io_ledr_expected_prev[16] !== last_o_io_ledr_exp[16]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[16] = o_io_ledr_expected_prev[16];
	end
	if (
		( o_io_ledr_expected_prev[17] !== 1'bx ) && ( o_io_ledr_prev[17] !== o_io_ledr_expected_prev[17] )
		&& ((o_io_ledr_expected_prev[17] !== last_o_io_ledr_exp[17]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[17] = o_io_ledr_expected_prev[17];
	end
	if (
		( o_io_ledr_expected_prev[18] !== 1'bx ) && ( o_io_ledr_prev[18] !== o_io_ledr_expected_prev[18] )
		&& ((o_io_ledr_expected_prev[18] !== last_o_io_ledr_exp[18]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[18] = o_io_ledr_expected_prev[18];
	end
	if (
		( o_io_ledr_expected_prev[19] !== 1'bx ) && ( o_io_ledr_prev[19] !== o_io_ledr_expected_prev[19] )
		&& ((o_io_ledr_expected_prev[19] !== last_o_io_ledr_exp[19]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[19] = o_io_ledr_expected_prev[19];
	end
	if (
		( o_io_ledr_expected_prev[20] !== 1'bx ) && ( o_io_ledr_prev[20] !== o_io_ledr_expected_prev[20] )
		&& ((o_io_ledr_expected_prev[20] !== last_o_io_ledr_exp[20]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[20] = o_io_ledr_expected_prev[20];
	end
	if (
		( o_io_ledr_expected_prev[21] !== 1'bx ) && ( o_io_ledr_prev[21] !== o_io_ledr_expected_prev[21] )
		&& ((o_io_ledr_expected_prev[21] !== last_o_io_ledr_exp[21]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[21] = o_io_ledr_expected_prev[21];
	end
	if (
		( o_io_ledr_expected_prev[22] !== 1'bx ) && ( o_io_ledr_prev[22] !== o_io_ledr_expected_prev[22] )
		&& ((o_io_ledr_expected_prev[22] !== last_o_io_ledr_exp[22]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[22] = o_io_ledr_expected_prev[22];
	end
	if (
		( o_io_ledr_expected_prev[23] !== 1'bx ) && ( o_io_ledr_prev[23] !== o_io_ledr_expected_prev[23] )
		&& ((o_io_ledr_expected_prev[23] !== last_o_io_ledr_exp[23]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[23] = o_io_ledr_expected_prev[23];
	end
	if (
		( o_io_ledr_expected_prev[24] !== 1'bx ) && ( o_io_ledr_prev[24] !== o_io_ledr_expected_prev[24] )
		&& ((o_io_ledr_expected_prev[24] !== last_o_io_ledr_exp[24]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[24] = o_io_ledr_expected_prev[24];
	end
	if (
		( o_io_ledr_expected_prev[25] !== 1'bx ) && ( o_io_ledr_prev[25] !== o_io_ledr_expected_prev[25] )
		&& ((o_io_ledr_expected_prev[25] !== last_o_io_ledr_exp[25]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[25] = o_io_ledr_expected_prev[25];
	end
	if (
		( o_io_ledr_expected_prev[26] !== 1'bx ) && ( o_io_ledr_prev[26] !== o_io_ledr_expected_prev[26] )
		&& ((o_io_ledr_expected_prev[26] !== last_o_io_ledr_exp[26]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[26] = o_io_ledr_expected_prev[26];
	end
	if (
		( o_io_ledr_expected_prev[27] !== 1'bx ) && ( o_io_ledr_prev[27] !== o_io_ledr_expected_prev[27] )
		&& ((o_io_ledr_expected_prev[27] !== last_o_io_ledr_exp[27]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[27] = o_io_ledr_expected_prev[27];
	end
	if (
		( o_io_ledr_expected_prev[28] !== 1'bx ) && ( o_io_ledr_prev[28] !== o_io_ledr_expected_prev[28] )
		&& ((o_io_ledr_expected_prev[28] !== last_o_io_ledr_exp[28]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[28] = o_io_ledr_expected_prev[28];
	end
	if (
		( o_io_ledr_expected_prev[29] !== 1'bx ) && ( o_io_ledr_prev[29] !== o_io_ledr_expected_prev[29] )
		&& ((o_io_ledr_expected_prev[29] !== last_o_io_ledr_exp[29]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[29] = o_io_ledr_expected_prev[29];
	end
	if (
		( o_io_ledr_expected_prev[30] !== 1'bx ) && ( o_io_ledr_prev[30] !== o_io_ledr_expected_prev[30] )
		&& ((o_io_ledr_expected_prev[30] !== last_o_io_ledr_exp[30]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[30] = o_io_ledr_expected_prev[30];
	end
	if (
		( o_io_ledr_expected_prev[31] !== 1'bx ) && ( o_io_ledr_prev[31] !== o_io_ledr_expected_prev[31] )
		&& ((o_io_ledr_expected_prev[31] !== last_o_io_ledr_exp[31]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_io_ledr[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_io_ledr_expected_prev);
		$display ("     Real value = %b", o_io_ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_o_io_ledr_exp[31] = o_io_ledr_expected_prev[31];
	end
	if (
		( o_pc_debug_expected_prev[0] !== 1'bx ) && ( o_pc_debug_prev[0] !== o_pc_debug_expected_prev[0] )
		&& ((o_pc_debug_expected_prev[0] !== last_o_pc_debug_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[0] = o_pc_debug_expected_prev[0];
	end
	if (
		( o_pc_debug_expected_prev[1] !== 1'bx ) && ( o_pc_debug_prev[1] !== o_pc_debug_expected_prev[1] )
		&& ((o_pc_debug_expected_prev[1] !== last_o_pc_debug_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[1] = o_pc_debug_expected_prev[1];
	end
	if (
		( o_pc_debug_expected_prev[2] !== 1'bx ) && ( o_pc_debug_prev[2] !== o_pc_debug_expected_prev[2] )
		&& ((o_pc_debug_expected_prev[2] !== last_o_pc_debug_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[2] = o_pc_debug_expected_prev[2];
	end
	if (
		( o_pc_debug_expected_prev[3] !== 1'bx ) && ( o_pc_debug_prev[3] !== o_pc_debug_expected_prev[3] )
		&& ((o_pc_debug_expected_prev[3] !== last_o_pc_debug_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[3] = o_pc_debug_expected_prev[3];
	end
	if (
		( o_pc_debug_expected_prev[4] !== 1'bx ) && ( o_pc_debug_prev[4] !== o_pc_debug_expected_prev[4] )
		&& ((o_pc_debug_expected_prev[4] !== last_o_pc_debug_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[4] = o_pc_debug_expected_prev[4];
	end
	if (
		( o_pc_debug_expected_prev[5] !== 1'bx ) && ( o_pc_debug_prev[5] !== o_pc_debug_expected_prev[5] )
		&& ((o_pc_debug_expected_prev[5] !== last_o_pc_debug_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[5] = o_pc_debug_expected_prev[5];
	end
	if (
		( o_pc_debug_expected_prev[6] !== 1'bx ) && ( o_pc_debug_prev[6] !== o_pc_debug_expected_prev[6] )
		&& ((o_pc_debug_expected_prev[6] !== last_o_pc_debug_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[6] = o_pc_debug_expected_prev[6];
	end
	if (
		( o_pc_debug_expected_prev[7] !== 1'bx ) && ( o_pc_debug_prev[7] !== o_pc_debug_expected_prev[7] )
		&& ((o_pc_debug_expected_prev[7] !== last_o_pc_debug_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[7] = o_pc_debug_expected_prev[7];
	end
	if (
		( o_pc_debug_expected_prev[8] !== 1'bx ) && ( o_pc_debug_prev[8] !== o_pc_debug_expected_prev[8] )
		&& ((o_pc_debug_expected_prev[8] !== last_o_pc_debug_exp[8]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[8] = o_pc_debug_expected_prev[8];
	end
	if (
		( o_pc_debug_expected_prev[9] !== 1'bx ) && ( o_pc_debug_prev[9] !== o_pc_debug_expected_prev[9] )
		&& ((o_pc_debug_expected_prev[9] !== last_o_pc_debug_exp[9]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[9] = o_pc_debug_expected_prev[9];
	end
	if (
		( o_pc_debug_expected_prev[10] !== 1'bx ) && ( o_pc_debug_prev[10] !== o_pc_debug_expected_prev[10] )
		&& ((o_pc_debug_expected_prev[10] !== last_o_pc_debug_exp[10]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[10] = o_pc_debug_expected_prev[10];
	end
	if (
		( o_pc_debug_expected_prev[11] !== 1'bx ) && ( o_pc_debug_prev[11] !== o_pc_debug_expected_prev[11] )
		&& ((o_pc_debug_expected_prev[11] !== last_o_pc_debug_exp[11]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[11] = o_pc_debug_expected_prev[11];
	end
	if (
		( o_pc_debug_expected_prev[12] !== 1'bx ) && ( o_pc_debug_prev[12] !== o_pc_debug_expected_prev[12] )
		&& ((o_pc_debug_expected_prev[12] !== last_o_pc_debug_exp[12]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[12] = o_pc_debug_expected_prev[12];
	end
	if (
		( o_pc_debug_expected_prev[13] !== 1'bx ) && ( o_pc_debug_prev[13] !== o_pc_debug_expected_prev[13] )
		&& ((o_pc_debug_expected_prev[13] !== last_o_pc_debug_exp[13]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[13] = o_pc_debug_expected_prev[13];
	end
	if (
		( o_pc_debug_expected_prev[14] !== 1'bx ) && ( o_pc_debug_prev[14] !== o_pc_debug_expected_prev[14] )
		&& ((o_pc_debug_expected_prev[14] !== last_o_pc_debug_exp[14]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[14] = o_pc_debug_expected_prev[14];
	end
	if (
		( o_pc_debug_expected_prev[15] !== 1'bx ) && ( o_pc_debug_prev[15] !== o_pc_debug_expected_prev[15] )
		&& ((o_pc_debug_expected_prev[15] !== last_o_pc_debug_exp[15]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[15] = o_pc_debug_expected_prev[15];
	end
	if (
		( o_pc_debug_expected_prev[16] !== 1'bx ) && ( o_pc_debug_prev[16] !== o_pc_debug_expected_prev[16] )
		&& ((o_pc_debug_expected_prev[16] !== last_o_pc_debug_exp[16]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[16] = o_pc_debug_expected_prev[16];
	end
	if (
		( o_pc_debug_expected_prev[17] !== 1'bx ) && ( o_pc_debug_prev[17] !== o_pc_debug_expected_prev[17] )
		&& ((o_pc_debug_expected_prev[17] !== last_o_pc_debug_exp[17]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[17] = o_pc_debug_expected_prev[17];
	end
	if (
		( o_pc_debug_expected_prev[18] !== 1'bx ) && ( o_pc_debug_prev[18] !== o_pc_debug_expected_prev[18] )
		&& ((o_pc_debug_expected_prev[18] !== last_o_pc_debug_exp[18]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[18] = o_pc_debug_expected_prev[18];
	end
	if (
		( o_pc_debug_expected_prev[19] !== 1'bx ) && ( o_pc_debug_prev[19] !== o_pc_debug_expected_prev[19] )
		&& ((o_pc_debug_expected_prev[19] !== last_o_pc_debug_exp[19]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[19] = o_pc_debug_expected_prev[19];
	end
	if (
		( o_pc_debug_expected_prev[20] !== 1'bx ) && ( o_pc_debug_prev[20] !== o_pc_debug_expected_prev[20] )
		&& ((o_pc_debug_expected_prev[20] !== last_o_pc_debug_exp[20]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[20] = o_pc_debug_expected_prev[20];
	end
	if (
		( o_pc_debug_expected_prev[21] !== 1'bx ) && ( o_pc_debug_prev[21] !== o_pc_debug_expected_prev[21] )
		&& ((o_pc_debug_expected_prev[21] !== last_o_pc_debug_exp[21]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[21] = o_pc_debug_expected_prev[21];
	end
	if (
		( o_pc_debug_expected_prev[22] !== 1'bx ) && ( o_pc_debug_prev[22] !== o_pc_debug_expected_prev[22] )
		&& ((o_pc_debug_expected_prev[22] !== last_o_pc_debug_exp[22]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[22] = o_pc_debug_expected_prev[22];
	end
	if (
		( o_pc_debug_expected_prev[23] !== 1'bx ) && ( o_pc_debug_prev[23] !== o_pc_debug_expected_prev[23] )
		&& ((o_pc_debug_expected_prev[23] !== last_o_pc_debug_exp[23]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[23] = o_pc_debug_expected_prev[23];
	end
	if (
		( o_pc_debug_expected_prev[24] !== 1'bx ) && ( o_pc_debug_prev[24] !== o_pc_debug_expected_prev[24] )
		&& ((o_pc_debug_expected_prev[24] !== last_o_pc_debug_exp[24]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[24] = o_pc_debug_expected_prev[24];
	end
	if (
		( o_pc_debug_expected_prev[25] !== 1'bx ) && ( o_pc_debug_prev[25] !== o_pc_debug_expected_prev[25] )
		&& ((o_pc_debug_expected_prev[25] !== last_o_pc_debug_exp[25]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[25] = o_pc_debug_expected_prev[25];
	end
	if (
		( o_pc_debug_expected_prev[26] !== 1'bx ) && ( o_pc_debug_prev[26] !== o_pc_debug_expected_prev[26] )
		&& ((o_pc_debug_expected_prev[26] !== last_o_pc_debug_exp[26]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[26] = o_pc_debug_expected_prev[26];
	end
	if (
		( o_pc_debug_expected_prev[27] !== 1'bx ) && ( o_pc_debug_prev[27] !== o_pc_debug_expected_prev[27] )
		&& ((o_pc_debug_expected_prev[27] !== last_o_pc_debug_exp[27]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[27] = o_pc_debug_expected_prev[27];
	end
	if (
		( o_pc_debug_expected_prev[28] !== 1'bx ) && ( o_pc_debug_prev[28] !== o_pc_debug_expected_prev[28] )
		&& ((o_pc_debug_expected_prev[28] !== last_o_pc_debug_exp[28]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[28] = o_pc_debug_expected_prev[28];
	end
	if (
		( o_pc_debug_expected_prev[29] !== 1'bx ) && ( o_pc_debug_prev[29] !== o_pc_debug_expected_prev[29] )
		&& ((o_pc_debug_expected_prev[29] !== last_o_pc_debug_exp[29]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[29] = o_pc_debug_expected_prev[29];
	end
	if (
		( o_pc_debug_expected_prev[30] !== 1'bx ) && ( o_pc_debug_prev[30] !== o_pc_debug_expected_prev[30] )
		&& ((o_pc_debug_expected_prev[30] !== last_o_pc_debug_exp[30]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[30] = o_pc_debug_expected_prev[30];
	end
	if (
		( o_pc_debug_expected_prev[31] !== 1'bx ) && ( o_pc_debug_prev[31] !== o_pc_debug_expected_prev[31] )
		&& ((o_pc_debug_expected_prev[31] !== last_o_pc_debug_exp[31]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_pc_debug[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_pc_debug_expected_prev);
		$display ("     Real value = %b", o_pc_debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_o_pc_debug_exp[31] = o_pc_debug_expected_prev[31];
	end
	if (
		( rs1_data_HE_check_expected_prev[0] !== 1'bx ) && ( rs1_data_HE_check_prev[0] !== rs1_data_HE_check_expected_prev[0] )
		&& ((rs1_data_HE_check_expected_prev[0] !== last_rs1_data_HE_check_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[0] = rs1_data_HE_check_expected_prev[0];
	end
	if (
		( rs1_data_HE_check_expected_prev[1] !== 1'bx ) && ( rs1_data_HE_check_prev[1] !== rs1_data_HE_check_expected_prev[1] )
		&& ((rs1_data_HE_check_expected_prev[1] !== last_rs1_data_HE_check_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[1] = rs1_data_HE_check_expected_prev[1];
	end
	if (
		( rs1_data_HE_check_expected_prev[2] !== 1'bx ) && ( rs1_data_HE_check_prev[2] !== rs1_data_HE_check_expected_prev[2] )
		&& ((rs1_data_HE_check_expected_prev[2] !== last_rs1_data_HE_check_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[2] = rs1_data_HE_check_expected_prev[2];
	end
	if (
		( rs1_data_HE_check_expected_prev[3] !== 1'bx ) && ( rs1_data_HE_check_prev[3] !== rs1_data_HE_check_expected_prev[3] )
		&& ((rs1_data_HE_check_expected_prev[3] !== last_rs1_data_HE_check_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[3] = rs1_data_HE_check_expected_prev[3];
	end
	if (
		( rs1_data_HE_check_expected_prev[4] !== 1'bx ) && ( rs1_data_HE_check_prev[4] !== rs1_data_HE_check_expected_prev[4] )
		&& ((rs1_data_HE_check_expected_prev[4] !== last_rs1_data_HE_check_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[4] = rs1_data_HE_check_expected_prev[4];
	end
	if (
		( rs1_data_HE_check_expected_prev[5] !== 1'bx ) && ( rs1_data_HE_check_prev[5] !== rs1_data_HE_check_expected_prev[5] )
		&& ((rs1_data_HE_check_expected_prev[5] !== last_rs1_data_HE_check_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[5] = rs1_data_HE_check_expected_prev[5];
	end
	if (
		( rs1_data_HE_check_expected_prev[6] !== 1'bx ) && ( rs1_data_HE_check_prev[6] !== rs1_data_HE_check_expected_prev[6] )
		&& ((rs1_data_HE_check_expected_prev[6] !== last_rs1_data_HE_check_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[6] = rs1_data_HE_check_expected_prev[6];
	end
	if (
		( rs1_data_HE_check_expected_prev[7] !== 1'bx ) && ( rs1_data_HE_check_prev[7] !== rs1_data_HE_check_expected_prev[7] )
		&& ((rs1_data_HE_check_expected_prev[7] !== last_rs1_data_HE_check_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[7] = rs1_data_HE_check_expected_prev[7];
	end
	if (
		( rs1_data_HE_check_expected_prev[8] !== 1'bx ) && ( rs1_data_HE_check_prev[8] !== rs1_data_HE_check_expected_prev[8] )
		&& ((rs1_data_HE_check_expected_prev[8] !== last_rs1_data_HE_check_exp[8]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[8] = rs1_data_HE_check_expected_prev[8];
	end
	if (
		( rs1_data_HE_check_expected_prev[9] !== 1'bx ) && ( rs1_data_HE_check_prev[9] !== rs1_data_HE_check_expected_prev[9] )
		&& ((rs1_data_HE_check_expected_prev[9] !== last_rs1_data_HE_check_exp[9]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[9] = rs1_data_HE_check_expected_prev[9];
	end
	if (
		( rs1_data_HE_check_expected_prev[10] !== 1'bx ) && ( rs1_data_HE_check_prev[10] !== rs1_data_HE_check_expected_prev[10] )
		&& ((rs1_data_HE_check_expected_prev[10] !== last_rs1_data_HE_check_exp[10]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[10] = rs1_data_HE_check_expected_prev[10];
	end
	if (
		( rs1_data_HE_check_expected_prev[11] !== 1'bx ) && ( rs1_data_HE_check_prev[11] !== rs1_data_HE_check_expected_prev[11] )
		&& ((rs1_data_HE_check_expected_prev[11] !== last_rs1_data_HE_check_exp[11]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[11] = rs1_data_HE_check_expected_prev[11];
	end
	if (
		( rs1_data_HE_check_expected_prev[12] !== 1'bx ) && ( rs1_data_HE_check_prev[12] !== rs1_data_HE_check_expected_prev[12] )
		&& ((rs1_data_HE_check_expected_prev[12] !== last_rs1_data_HE_check_exp[12]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[12] = rs1_data_HE_check_expected_prev[12];
	end
	if (
		( rs1_data_HE_check_expected_prev[13] !== 1'bx ) && ( rs1_data_HE_check_prev[13] !== rs1_data_HE_check_expected_prev[13] )
		&& ((rs1_data_HE_check_expected_prev[13] !== last_rs1_data_HE_check_exp[13]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[13] = rs1_data_HE_check_expected_prev[13];
	end
	if (
		( rs1_data_HE_check_expected_prev[14] !== 1'bx ) && ( rs1_data_HE_check_prev[14] !== rs1_data_HE_check_expected_prev[14] )
		&& ((rs1_data_HE_check_expected_prev[14] !== last_rs1_data_HE_check_exp[14]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[14] = rs1_data_HE_check_expected_prev[14];
	end
	if (
		( rs1_data_HE_check_expected_prev[15] !== 1'bx ) && ( rs1_data_HE_check_prev[15] !== rs1_data_HE_check_expected_prev[15] )
		&& ((rs1_data_HE_check_expected_prev[15] !== last_rs1_data_HE_check_exp[15]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[15] = rs1_data_HE_check_expected_prev[15];
	end
	if (
		( rs1_data_HE_check_expected_prev[16] !== 1'bx ) && ( rs1_data_HE_check_prev[16] !== rs1_data_HE_check_expected_prev[16] )
		&& ((rs1_data_HE_check_expected_prev[16] !== last_rs1_data_HE_check_exp[16]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[16] = rs1_data_HE_check_expected_prev[16];
	end
	if (
		( rs1_data_HE_check_expected_prev[17] !== 1'bx ) && ( rs1_data_HE_check_prev[17] !== rs1_data_HE_check_expected_prev[17] )
		&& ((rs1_data_HE_check_expected_prev[17] !== last_rs1_data_HE_check_exp[17]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[17] = rs1_data_HE_check_expected_prev[17];
	end
	if (
		( rs1_data_HE_check_expected_prev[18] !== 1'bx ) && ( rs1_data_HE_check_prev[18] !== rs1_data_HE_check_expected_prev[18] )
		&& ((rs1_data_HE_check_expected_prev[18] !== last_rs1_data_HE_check_exp[18]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[18] = rs1_data_HE_check_expected_prev[18];
	end
	if (
		( rs1_data_HE_check_expected_prev[19] !== 1'bx ) && ( rs1_data_HE_check_prev[19] !== rs1_data_HE_check_expected_prev[19] )
		&& ((rs1_data_HE_check_expected_prev[19] !== last_rs1_data_HE_check_exp[19]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[19] = rs1_data_HE_check_expected_prev[19];
	end
	if (
		( rs1_data_HE_check_expected_prev[20] !== 1'bx ) && ( rs1_data_HE_check_prev[20] !== rs1_data_HE_check_expected_prev[20] )
		&& ((rs1_data_HE_check_expected_prev[20] !== last_rs1_data_HE_check_exp[20]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[20] = rs1_data_HE_check_expected_prev[20];
	end
	if (
		( rs1_data_HE_check_expected_prev[21] !== 1'bx ) && ( rs1_data_HE_check_prev[21] !== rs1_data_HE_check_expected_prev[21] )
		&& ((rs1_data_HE_check_expected_prev[21] !== last_rs1_data_HE_check_exp[21]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[21] = rs1_data_HE_check_expected_prev[21];
	end
	if (
		( rs1_data_HE_check_expected_prev[22] !== 1'bx ) && ( rs1_data_HE_check_prev[22] !== rs1_data_HE_check_expected_prev[22] )
		&& ((rs1_data_HE_check_expected_prev[22] !== last_rs1_data_HE_check_exp[22]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[22] = rs1_data_HE_check_expected_prev[22];
	end
	if (
		( rs1_data_HE_check_expected_prev[23] !== 1'bx ) && ( rs1_data_HE_check_prev[23] !== rs1_data_HE_check_expected_prev[23] )
		&& ((rs1_data_HE_check_expected_prev[23] !== last_rs1_data_HE_check_exp[23]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[23] = rs1_data_HE_check_expected_prev[23];
	end
	if (
		( rs1_data_HE_check_expected_prev[24] !== 1'bx ) && ( rs1_data_HE_check_prev[24] !== rs1_data_HE_check_expected_prev[24] )
		&& ((rs1_data_HE_check_expected_prev[24] !== last_rs1_data_HE_check_exp[24]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[24] = rs1_data_HE_check_expected_prev[24];
	end
	if (
		( rs1_data_HE_check_expected_prev[25] !== 1'bx ) && ( rs1_data_HE_check_prev[25] !== rs1_data_HE_check_expected_prev[25] )
		&& ((rs1_data_HE_check_expected_prev[25] !== last_rs1_data_HE_check_exp[25]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[25] = rs1_data_HE_check_expected_prev[25];
	end
	if (
		( rs1_data_HE_check_expected_prev[26] !== 1'bx ) && ( rs1_data_HE_check_prev[26] !== rs1_data_HE_check_expected_prev[26] )
		&& ((rs1_data_HE_check_expected_prev[26] !== last_rs1_data_HE_check_exp[26]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[26] = rs1_data_HE_check_expected_prev[26];
	end
	if (
		( rs1_data_HE_check_expected_prev[27] !== 1'bx ) && ( rs1_data_HE_check_prev[27] !== rs1_data_HE_check_expected_prev[27] )
		&& ((rs1_data_HE_check_expected_prev[27] !== last_rs1_data_HE_check_exp[27]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[27] = rs1_data_HE_check_expected_prev[27];
	end
	if (
		( rs1_data_HE_check_expected_prev[28] !== 1'bx ) && ( rs1_data_HE_check_prev[28] !== rs1_data_HE_check_expected_prev[28] )
		&& ((rs1_data_HE_check_expected_prev[28] !== last_rs1_data_HE_check_exp[28]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[28] = rs1_data_HE_check_expected_prev[28];
	end
	if (
		( rs1_data_HE_check_expected_prev[29] !== 1'bx ) && ( rs1_data_HE_check_prev[29] !== rs1_data_HE_check_expected_prev[29] )
		&& ((rs1_data_HE_check_expected_prev[29] !== last_rs1_data_HE_check_exp[29]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[29] = rs1_data_HE_check_expected_prev[29];
	end
	if (
		( rs1_data_HE_check_expected_prev[30] !== 1'bx ) && ( rs1_data_HE_check_prev[30] !== rs1_data_HE_check_expected_prev[30] )
		&& ((rs1_data_HE_check_expected_prev[30] !== last_rs1_data_HE_check_exp[30]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[30] = rs1_data_HE_check_expected_prev[30];
	end
	if (
		( rs1_data_HE_check_expected_prev[31] !== 1'bx ) && ( rs1_data_HE_check_prev[31] !== rs1_data_HE_check_expected_prev[31] )
		&& ((rs1_data_HE_check_expected_prev[31] !== last_rs1_data_HE_check_exp[31]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs1_data_HE_check[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs1_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs1_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_rs1_data_HE_check_exp[31] = rs1_data_HE_check_expected_prev[31];
	end
	if (
		( rs2_data_HE_check_expected_prev[0] !== 1'bx ) && ( rs2_data_HE_check_prev[0] !== rs2_data_HE_check_expected_prev[0] )
		&& ((rs2_data_HE_check_expected_prev[0] !== last_rs2_data_HE_check_exp[0]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[0] = rs2_data_HE_check_expected_prev[0];
	end
	if (
		( rs2_data_HE_check_expected_prev[1] !== 1'bx ) && ( rs2_data_HE_check_prev[1] !== rs2_data_HE_check_expected_prev[1] )
		&& ((rs2_data_HE_check_expected_prev[1] !== last_rs2_data_HE_check_exp[1]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[1] = rs2_data_HE_check_expected_prev[1];
	end
	if (
		( rs2_data_HE_check_expected_prev[2] !== 1'bx ) && ( rs2_data_HE_check_prev[2] !== rs2_data_HE_check_expected_prev[2] )
		&& ((rs2_data_HE_check_expected_prev[2] !== last_rs2_data_HE_check_exp[2]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[2] = rs2_data_HE_check_expected_prev[2];
	end
	if (
		( rs2_data_HE_check_expected_prev[3] !== 1'bx ) && ( rs2_data_HE_check_prev[3] !== rs2_data_HE_check_expected_prev[3] )
		&& ((rs2_data_HE_check_expected_prev[3] !== last_rs2_data_HE_check_exp[3]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[3] = rs2_data_HE_check_expected_prev[3];
	end
	if (
		( rs2_data_HE_check_expected_prev[4] !== 1'bx ) && ( rs2_data_HE_check_prev[4] !== rs2_data_HE_check_expected_prev[4] )
		&& ((rs2_data_HE_check_expected_prev[4] !== last_rs2_data_HE_check_exp[4]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[4] = rs2_data_HE_check_expected_prev[4];
	end
	if (
		( rs2_data_HE_check_expected_prev[5] !== 1'bx ) && ( rs2_data_HE_check_prev[5] !== rs2_data_HE_check_expected_prev[5] )
		&& ((rs2_data_HE_check_expected_prev[5] !== last_rs2_data_HE_check_exp[5]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[5] = rs2_data_HE_check_expected_prev[5];
	end
	if (
		( rs2_data_HE_check_expected_prev[6] !== 1'bx ) && ( rs2_data_HE_check_prev[6] !== rs2_data_HE_check_expected_prev[6] )
		&& ((rs2_data_HE_check_expected_prev[6] !== last_rs2_data_HE_check_exp[6]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[6] = rs2_data_HE_check_expected_prev[6];
	end
	if (
		( rs2_data_HE_check_expected_prev[7] !== 1'bx ) && ( rs2_data_HE_check_prev[7] !== rs2_data_HE_check_expected_prev[7] )
		&& ((rs2_data_HE_check_expected_prev[7] !== last_rs2_data_HE_check_exp[7]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[7] = rs2_data_HE_check_expected_prev[7];
	end
	if (
		( rs2_data_HE_check_expected_prev[8] !== 1'bx ) && ( rs2_data_HE_check_prev[8] !== rs2_data_HE_check_expected_prev[8] )
		&& ((rs2_data_HE_check_expected_prev[8] !== last_rs2_data_HE_check_exp[8]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[8] = rs2_data_HE_check_expected_prev[8];
	end
	if (
		( rs2_data_HE_check_expected_prev[9] !== 1'bx ) && ( rs2_data_HE_check_prev[9] !== rs2_data_HE_check_expected_prev[9] )
		&& ((rs2_data_HE_check_expected_prev[9] !== last_rs2_data_HE_check_exp[9]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[9] = rs2_data_HE_check_expected_prev[9];
	end
	if (
		( rs2_data_HE_check_expected_prev[10] !== 1'bx ) && ( rs2_data_HE_check_prev[10] !== rs2_data_HE_check_expected_prev[10] )
		&& ((rs2_data_HE_check_expected_prev[10] !== last_rs2_data_HE_check_exp[10]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[10] = rs2_data_HE_check_expected_prev[10];
	end
	if (
		( rs2_data_HE_check_expected_prev[11] !== 1'bx ) && ( rs2_data_HE_check_prev[11] !== rs2_data_HE_check_expected_prev[11] )
		&& ((rs2_data_HE_check_expected_prev[11] !== last_rs2_data_HE_check_exp[11]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[11] = rs2_data_HE_check_expected_prev[11];
	end
	if (
		( rs2_data_HE_check_expected_prev[12] !== 1'bx ) && ( rs2_data_HE_check_prev[12] !== rs2_data_HE_check_expected_prev[12] )
		&& ((rs2_data_HE_check_expected_prev[12] !== last_rs2_data_HE_check_exp[12]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[12] = rs2_data_HE_check_expected_prev[12];
	end
	if (
		( rs2_data_HE_check_expected_prev[13] !== 1'bx ) && ( rs2_data_HE_check_prev[13] !== rs2_data_HE_check_expected_prev[13] )
		&& ((rs2_data_HE_check_expected_prev[13] !== last_rs2_data_HE_check_exp[13]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[13] = rs2_data_HE_check_expected_prev[13];
	end
	if (
		( rs2_data_HE_check_expected_prev[14] !== 1'bx ) && ( rs2_data_HE_check_prev[14] !== rs2_data_HE_check_expected_prev[14] )
		&& ((rs2_data_HE_check_expected_prev[14] !== last_rs2_data_HE_check_exp[14]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[14] = rs2_data_HE_check_expected_prev[14];
	end
	if (
		( rs2_data_HE_check_expected_prev[15] !== 1'bx ) && ( rs2_data_HE_check_prev[15] !== rs2_data_HE_check_expected_prev[15] )
		&& ((rs2_data_HE_check_expected_prev[15] !== last_rs2_data_HE_check_exp[15]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[15] = rs2_data_HE_check_expected_prev[15];
	end
	if (
		( rs2_data_HE_check_expected_prev[16] !== 1'bx ) && ( rs2_data_HE_check_prev[16] !== rs2_data_HE_check_expected_prev[16] )
		&& ((rs2_data_HE_check_expected_prev[16] !== last_rs2_data_HE_check_exp[16]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[16] = rs2_data_HE_check_expected_prev[16];
	end
	if (
		( rs2_data_HE_check_expected_prev[17] !== 1'bx ) && ( rs2_data_HE_check_prev[17] !== rs2_data_HE_check_expected_prev[17] )
		&& ((rs2_data_HE_check_expected_prev[17] !== last_rs2_data_HE_check_exp[17]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[17] = rs2_data_HE_check_expected_prev[17];
	end
	if (
		( rs2_data_HE_check_expected_prev[18] !== 1'bx ) && ( rs2_data_HE_check_prev[18] !== rs2_data_HE_check_expected_prev[18] )
		&& ((rs2_data_HE_check_expected_prev[18] !== last_rs2_data_HE_check_exp[18]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[18] = rs2_data_HE_check_expected_prev[18];
	end
	if (
		( rs2_data_HE_check_expected_prev[19] !== 1'bx ) && ( rs2_data_HE_check_prev[19] !== rs2_data_HE_check_expected_prev[19] )
		&& ((rs2_data_HE_check_expected_prev[19] !== last_rs2_data_HE_check_exp[19]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[19] = rs2_data_HE_check_expected_prev[19];
	end
	if (
		( rs2_data_HE_check_expected_prev[20] !== 1'bx ) && ( rs2_data_HE_check_prev[20] !== rs2_data_HE_check_expected_prev[20] )
		&& ((rs2_data_HE_check_expected_prev[20] !== last_rs2_data_HE_check_exp[20]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[20] = rs2_data_HE_check_expected_prev[20];
	end
	if (
		( rs2_data_HE_check_expected_prev[21] !== 1'bx ) && ( rs2_data_HE_check_prev[21] !== rs2_data_HE_check_expected_prev[21] )
		&& ((rs2_data_HE_check_expected_prev[21] !== last_rs2_data_HE_check_exp[21]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[21] = rs2_data_HE_check_expected_prev[21];
	end
	if (
		( rs2_data_HE_check_expected_prev[22] !== 1'bx ) && ( rs2_data_HE_check_prev[22] !== rs2_data_HE_check_expected_prev[22] )
		&& ((rs2_data_HE_check_expected_prev[22] !== last_rs2_data_HE_check_exp[22]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[22] = rs2_data_HE_check_expected_prev[22];
	end
	if (
		( rs2_data_HE_check_expected_prev[23] !== 1'bx ) && ( rs2_data_HE_check_prev[23] !== rs2_data_HE_check_expected_prev[23] )
		&& ((rs2_data_HE_check_expected_prev[23] !== last_rs2_data_HE_check_exp[23]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[23] = rs2_data_HE_check_expected_prev[23];
	end
	if (
		( rs2_data_HE_check_expected_prev[24] !== 1'bx ) && ( rs2_data_HE_check_prev[24] !== rs2_data_HE_check_expected_prev[24] )
		&& ((rs2_data_HE_check_expected_prev[24] !== last_rs2_data_HE_check_exp[24]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[24] = rs2_data_HE_check_expected_prev[24];
	end
	if (
		( rs2_data_HE_check_expected_prev[25] !== 1'bx ) && ( rs2_data_HE_check_prev[25] !== rs2_data_HE_check_expected_prev[25] )
		&& ((rs2_data_HE_check_expected_prev[25] !== last_rs2_data_HE_check_exp[25]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[25] = rs2_data_HE_check_expected_prev[25];
	end
	if (
		( rs2_data_HE_check_expected_prev[26] !== 1'bx ) && ( rs2_data_HE_check_prev[26] !== rs2_data_HE_check_expected_prev[26] )
		&& ((rs2_data_HE_check_expected_prev[26] !== last_rs2_data_HE_check_exp[26]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[26] = rs2_data_HE_check_expected_prev[26];
	end
	if (
		( rs2_data_HE_check_expected_prev[27] !== 1'bx ) && ( rs2_data_HE_check_prev[27] !== rs2_data_HE_check_expected_prev[27] )
		&& ((rs2_data_HE_check_expected_prev[27] !== last_rs2_data_HE_check_exp[27]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[27] = rs2_data_HE_check_expected_prev[27];
	end
	if (
		( rs2_data_HE_check_expected_prev[28] !== 1'bx ) && ( rs2_data_HE_check_prev[28] !== rs2_data_HE_check_expected_prev[28] )
		&& ((rs2_data_HE_check_expected_prev[28] !== last_rs2_data_HE_check_exp[28]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[28] = rs2_data_HE_check_expected_prev[28];
	end
	if (
		( rs2_data_HE_check_expected_prev[29] !== 1'bx ) && ( rs2_data_HE_check_prev[29] !== rs2_data_HE_check_expected_prev[29] )
		&& ((rs2_data_HE_check_expected_prev[29] !== last_rs2_data_HE_check_exp[29]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[29] = rs2_data_HE_check_expected_prev[29];
	end
	if (
		( rs2_data_HE_check_expected_prev[30] !== 1'bx ) && ( rs2_data_HE_check_prev[30] !== rs2_data_HE_check_expected_prev[30] )
		&& ((rs2_data_HE_check_expected_prev[30] !== last_rs2_data_HE_check_exp[30]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[30] = rs2_data_HE_check_expected_prev[30];
	end
	if (
		( rs2_data_HE_check_expected_prev[31] !== 1'bx ) && ( rs2_data_HE_check_prev[31] !== rs2_data_HE_check_expected_prev[31] )
		&& ((rs2_data_HE_check_expected_prev[31] !== last_rs2_data_HE_check_exp[31]) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HE_check[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HE_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HE_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_rs2_data_HE_check_exp[31] = rs2_data_HE_check_expected_prev[31];
	end
	if (
		( rs2_data_HM_check_expected_prev[0] !== 1'bx ) && ( rs2_data_HM_check_prev[0] !== rs2_data_HM_check_expected_prev[0] )
		&& ((rs2_data_HM_check_expected_prev[0] !== last_rs2_data_HM_check_exp[0]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[0] = rs2_data_HM_check_expected_prev[0];
	end
	if (
		( rs2_data_HM_check_expected_prev[1] !== 1'bx ) && ( rs2_data_HM_check_prev[1] !== rs2_data_HM_check_expected_prev[1] )
		&& ((rs2_data_HM_check_expected_prev[1] !== last_rs2_data_HM_check_exp[1]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[1] = rs2_data_HM_check_expected_prev[1];
	end
	if (
		( rs2_data_HM_check_expected_prev[2] !== 1'bx ) && ( rs2_data_HM_check_prev[2] !== rs2_data_HM_check_expected_prev[2] )
		&& ((rs2_data_HM_check_expected_prev[2] !== last_rs2_data_HM_check_exp[2]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[2] = rs2_data_HM_check_expected_prev[2];
	end
	if (
		( rs2_data_HM_check_expected_prev[3] !== 1'bx ) && ( rs2_data_HM_check_prev[3] !== rs2_data_HM_check_expected_prev[3] )
		&& ((rs2_data_HM_check_expected_prev[3] !== last_rs2_data_HM_check_exp[3]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[3] = rs2_data_HM_check_expected_prev[3];
	end
	if (
		( rs2_data_HM_check_expected_prev[4] !== 1'bx ) && ( rs2_data_HM_check_prev[4] !== rs2_data_HM_check_expected_prev[4] )
		&& ((rs2_data_HM_check_expected_prev[4] !== last_rs2_data_HM_check_exp[4]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[4] = rs2_data_HM_check_expected_prev[4];
	end
	if (
		( rs2_data_HM_check_expected_prev[5] !== 1'bx ) && ( rs2_data_HM_check_prev[5] !== rs2_data_HM_check_expected_prev[5] )
		&& ((rs2_data_HM_check_expected_prev[5] !== last_rs2_data_HM_check_exp[5]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[5] = rs2_data_HM_check_expected_prev[5];
	end
	if (
		( rs2_data_HM_check_expected_prev[6] !== 1'bx ) && ( rs2_data_HM_check_prev[6] !== rs2_data_HM_check_expected_prev[6] )
		&& ((rs2_data_HM_check_expected_prev[6] !== last_rs2_data_HM_check_exp[6]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[6] = rs2_data_HM_check_expected_prev[6];
	end
	if (
		( rs2_data_HM_check_expected_prev[7] !== 1'bx ) && ( rs2_data_HM_check_prev[7] !== rs2_data_HM_check_expected_prev[7] )
		&& ((rs2_data_HM_check_expected_prev[7] !== last_rs2_data_HM_check_exp[7]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[7] = rs2_data_HM_check_expected_prev[7];
	end
	if (
		( rs2_data_HM_check_expected_prev[8] !== 1'bx ) && ( rs2_data_HM_check_prev[8] !== rs2_data_HM_check_expected_prev[8] )
		&& ((rs2_data_HM_check_expected_prev[8] !== last_rs2_data_HM_check_exp[8]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[8] = rs2_data_HM_check_expected_prev[8];
	end
	if (
		( rs2_data_HM_check_expected_prev[9] !== 1'bx ) && ( rs2_data_HM_check_prev[9] !== rs2_data_HM_check_expected_prev[9] )
		&& ((rs2_data_HM_check_expected_prev[9] !== last_rs2_data_HM_check_exp[9]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[9] = rs2_data_HM_check_expected_prev[9];
	end
	if (
		( rs2_data_HM_check_expected_prev[10] !== 1'bx ) && ( rs2_data_HM_check_prev[10] !== rs2_data_HM_check_expected_prev[10] )
		&& ((rs2_data_HM_check_expected_prev[10] !== last_rs2_data_HM_check_exp[10]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[10] = rs2_data_HM_check_expected_prev[10];
	end
	if (
		( rs2_data_HM_check_expected_prev[11] !== 1'bx ) && ( rs2_data_HM_check_prev[11] !== rs2_data_HM_check_expected_prev[11] )
		&& ((rs2_data_HM_check_expected_prev[11] !== last_rs2_data_HM_check_exp[11]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[11] = rs2_data_HM_check_expected_prev[11];
	end
	if (
		( rs2_data_HM_check_expected_prev[12] !== 1'bx ) && ( rs2_data_HM_check_prev[12] !== rs2_data_HM_check_expected_prev[12] )
		&& ((rs2_data_HM_check_expected_prev[12] !== last_rs2_data_HM_check_exp[12]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[12] = rs2_data_HM_check_expected_prev[12];
	end
	if (
		( rs2_data_HM_check_expected_prev[13] !== 1'bx ) && ( rs2_data_HM_check_prev[13] !== rs2_data_HM_check_expected_prev[13] )
		&& ((rs2_data_HM_check_expected_prev[13] !== last_rs2_data_HM_check_exp[13]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[13] = rs2_data_HM_check_expected_prev[13];
	end
	if (
		( rs2_data_HM_check_expected_prev[14] !== 1'bx ) && ( rs2_data_HM_check_prev[14] !== rs2_data_HM_check_expected_prev[14] )
		&& ((rs2_data_HM_check_expected_prev[14] !== last_rs2_data_HM_check_exp[14]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[14] = rs2_data_HM_check_expected_prev[14];
	end
	if (
		( rs2_data_HM_check_expected_prev[15] !== 1'bx ) && ( rs2_data_HM_check_prev[15] !== rs2_data_HM_check_expected_prev[15] )
		&& ((rs2_data_HM_check_expected_prev[15] !== last_rs2_data_HM_check_exp[15]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[15] = rs2_data_HM_check_expected_prev[15];
	end
	if (
		( rs2_data_HM_check_expected_prev[16] !== 1'bx ) && ( rs2_data_HM_check_prev[16] !== rs2_data_HM_check_expected_prev[16] )
		&& ((rs2_data_HM_check_expected_prev[16] !== last_rs2_data_HM_check_exp[16]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[16] = rs2_data_HM_check_expected_prev[16];
	end
	if (
		( rs2_data_HM_check_expected_prev[17] !== 1'bx ) && ( rs2_data_HM_check_prev[17] !== rs2_data_HM_check_expected_prev[17] )
		&& ((rs2_data_HM_check_expected_prev[17] !== last_rs2_data_HM_check_exp[17]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[17] = rs2_data_HM_check_expected_prev[17];
	end
	if (
		( rs2_data_HM_check_expected_prev[18] !== 1'bx ) && ( rs2_data_HM_check_prev[18] !== rs2_data_HM_check_expected_prev[18] )
		&& ((rs2_data_HM_check_expected_prev[18] !== last_rs2_data_HM_check_exp[18]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[18] = rs2_data_HM_check_expected_prev[18];
	end
	if (
		( rs2_data_HM_check_expected_prev[19] !== 1'bx ) && ( rs2_data_HM_check_prev[19] !== rs2_data_HM_check_expected_prev[19] )
		&& ((rs2_data_HM_check_expected_prev[19] !== last_rs2_data_HM_check_exp[19]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[19] = rs2_data_HM_check_expected_prev[19];
	end
	if (
		( rs2_data_HM_check_expected_prev[20] !== 1'bx ) && ( rs2_data_HM_check_prev[20] !== rs2_data_HM_check_expected_prev[20] )
		&& ((rs2_data_HM_check_expected_prev[20] !== last_rs2_data_HM_check_exp[20]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[20] = rs2_data_HM_check_expected_prev[20];
	end
	if (
		( rs2_data_HM_check_expected_prev[21] !== 1'bx ) && ( rs2_data_HM_check_prev[21] !== rs2_data_HM_check_expected_prev[21] )
		&& ((rs2_data_HM_check_expected_prev[21] !== last_rs2_data_HM_check_exp[21]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[21] = rs2_data_HM_check_expected_prev[21];
	end
	if (
		( rs2_data_HM_check_expected_prev[22] !== 1'bx ) && ( rs2_data_HM_check_prev[22] !== rs2_data_HM_check_expected_prev[22] )
		&& ((rs2_data_HM_check_expected_prev[22] !== last_rs2_data_HM_check_exp[22]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[22] = rs2_data_HM_check_expected_prev[22];
	end
	if (
		( rs2_data_HM_check_expected_prev[23] !== 1'bx ) && ( rs2_data_HM_check_prev[23] !== rs2_data_HM_check_expected_prev[23] )
		&& ((rs2_data_HM_check_expected_prev[23] !== last_rs2_data_HM_check_exp[23]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[23] = rs2_data_HM_check_expected_prev[23];
	end
	if (
		( rs2_data_HM_check_expected_prev[24] !== 1'bx ) && ( rs2_data_HM_check_prev[24] !== rs2_data_HM_check_expected_prev[24] )
		&& ((rs2_data_HM_check_expected_prev[24] !== last_rs2_data_HM_check_exp[24]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[24] = rs2_data_HM_check_expected_prev[24];
	end
	if (
		( rs2_data_HM_check_expected_prev[25] !== 1'bx ) && ( rs2_data_HM_check_prev[25] !== rs2_data_HM_check_expected_prev[25] )
		&& ((rs2_data_HM_check_expected_prev[25] !== last_rs2_data_HM_check_exp[25]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[25] = rs2_data_HM_check_expected_prev[25];
	end
	if (
		( rs2_data_HM_check_expected_prev[26] !== 1'bx ) && ( rs2_data_HM_check_prev[26] !== rs2_data_HM_check_expected_prev[26] )
		&& ((rs2_data_HM_check_expected_prev[26] !== last_rs2_data_HM_check_exp[26]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[26] = rs2_data_HM_check_expected_prev[26];
	end
	if (
		( rs2_data_HM_check_expected_prev[27] !== 1'bx ) && ( rs2_data_HM_check_prev[27] !== rs2_data_HM_check_expected_prev[27] )
		&& ((rs2_data_HM_check_expected_prev[27] !== last_rs2_data_HM_check_exp[27]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[27] = rs2_data_HM_check_expected_prev[27];
	end
	if (
		( rs2_data_HM_check_expected_prev[28] !== 1'bx ) && ( rs2_data_HM_check_prev[28] !== rs2_data_HM_check_expected_prev[28] )
		&& ((rs2_data_HM_check_expected_prev[28] !== last_rs2_data_HM_check_exp[28]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[28] = rs2_data_HM_check_expected_prev[28];
	end
	if (
		( rs2_data_HM_check_expected_prev[29] !== 1'bx ) && ( rs2_data_HM_check_prev[29] !== rs2_data_HM_check_expected_prev[29] )
		&& ((rs2_data_HM_check_expected_prev[29] !== last_rs2_data_HM_check_exp[29]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[29] = rs2_data_HM_check_expected_prev[29];
	end
	if (
		( rs2_data_HM_check_expected_prev[30] !== 1'bx ) && ( rs2_data_HM_check_prev[30] !== rs2_data_HM_check_expected_prev[30] )
		&& ((rs2_data_HM_check_expected_prev[30] !== last_rs2_data_HM_check_exp[30]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[30] = rs2_data_HM_check_expected_prev[30];
	end
	if (
		( rs2_data_HM_check_expected_prev[31] !== 1'bx ) && ( rs2_data_HM_check_prev[31] !== rs2_data_HM_check_expected_prev[31] )
		&& ((rs2_data_HM_check_expected_prev[31] !== last_rs2_data_HM_check_exp[31]) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rs2_data_HM_check[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rs2_data_HM_check_expected_prev);
		$display ("     Real value = %b", rs2_data_HM_check_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_rs2_data_HM_check_exp[31] = rs2_data_HM_check_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module pipeline_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_clk;
reg [3:0] i_io_btn;
reg [31:0] i_io_sw;
reg i_rst_n;
// wires                                               
wire [1:0] ForwardAE_check;
wire [1:0] ForwardBE_check;
wire [31:0] alu_data_M_check;
wire [31:0] checker1;
wire [31:0] checker2;
wire [31:0] checker3;
wire [31:0] checker4;
wire ldStall_check;
wire o_insn_vld;
wire [6:0] o_io_hex0;
wire [6:0] o_io_hex1;
wire [6:0] o_io_hex2;
wire [6:0] o_io_hex3;
wire [6:0] o_io_hex4;
wire [6:0] o_io_hex5;
wire [6:0] o_io_hex6;
wire [6:0] o_io_hex7;
wire [31:0] o_io_lcd;
wire [31:0] o_io_ledg;
wire [31:0] o_io_ledr;
wire [31:0] o_pc_debug;
wire [31:0] rs1_data_HE_check;
wire [31:0] rs2_data_HE_check;
wire [31:0] rs2_data_HM_check;

wire sampler;                             

// assign statements (if any)                          
pipeline i1 (
// port map - connection between master ports and signals/registers   
	.ForwardAE_check(ForwardAE_check),
	.ForwardBE_check(ForwardBE_check),
	.alu_data_M_check(alu_data_M_check),
	.checker1(checker1),
	.checker2(checker2),
	.checker3(checker3),
	.checker4(checker4),
	.i_clk(i_clk),
	.i_io_btn(i_io_btn),
	.i_io_sw(i_io_sw),
	.i_rst_n(i_rst_n),
	.ldStall_check(ldStall_check),
	.o_insn_vld(o_insn_vld),
	.o_io_hex0(o_io_hex0),
	.o_io_hex1(o_io_hex1),
	.o_io_hex2(o_io_hex2),
	.o_io_hex3(o_io_hex3),
	.o_io_hex4(o_io_hex4),
	.o_io_hex5(o_io_hex5),
	.o_io_hex6(o_io_hex6),
	.o_io_hex7(o_io_hex7),
	.o_io_lcd(o_io_lcd),
	.o_io_ledg(o_io_ledg),
	.o_io_ledr(o_io_ledr),
	.o_pc_debug(o_pc_debug),
	.rs1_data_HE_check(rs1_data_HE_check),
	.rs2_data_HE_check(rs2_data_HE_check),
	.rs2_data_HM_check(rs2_data_HM_check)
);

// i_clk
initial
begin
	repeat(16)
	begin
		i_clk = 1'b0;
		i_clk = #30000 1'b1;
		# 30000;
	end
	i_clk = 1'b0;
	i_clk = #30000 1'b1;
end 
// i_io_btn[ 3 ]
initial
begin
	i_io_btn[3] = 1'b0;
end 
// i_io_btn[ 2 ]
initial
begin
	i_io_btn[2] = 1'b0;
end 
// i_io_btn[ 1 ]
initial
begin
	i_io_btn[1] = 1'b0;
end 
// i_io_btn[ 0 ]
initial
begin
	i_io_btn[0] = 1'b0;
end 
// i_io_sw[ 31 ]
initial
begin
	i_io_sw[31] = 1'b1;
end 
// i_io_sw[ 30 ]
initial
begin
	i_io_sw[30] = 1'b1;
end 
// i_io_sw[ 29 ]
initial
begin
	i_io_sw[29] = 1'b1;
end 
// i_io_sw[ 28 ]
initial
begin
	i_io_sw[28] = 1'b1;
end 
// i_io_sw[ 27 ]
initial
begin
	i_io_sw[27] = 1'b1;
end 
// i_io_sw[ 26 ]
initial
begin
	i_io_sw[26] = 1'b1;
end 
// i_io_sw[ 25 ]
initial
begin
	i_io_sw[25] = 1'b1;
end 
// i_io_sw[ 24 ]
initial
begin
	i_io_sw[24] = 1'b1;
end 
// i_io_sw[ 23 ]
initial
begin
	i_io_sw[23] = 1'b1;
end 
// i_io_sw[ 22 ]
initial
begin
	i_io_sw[22] = 1'b1;
end 
// i_io_sw[ 21 ]
initial
begin
	i_io_sw[21] = 1'b1;
end 
// i_io_sw[ 20 ]
initial
begin
	i_io_sw[20] = 1'b1;
end 
// i_io_sw[ 19 ]
initial
begin
	i_io_sw[19] = 1'b1;
end 
// i_io_sw[ 18 ]
initial
begin
	i_io_sw[18] = 1'b1;
end 
// i_io_sw[ 17 ]
initial
begin
	i_io_sw[17] = 1'b1;
end 
// i_io_sw[ 16 ]
initial
begin
	i_io_sw[16] = 1'b1;
end 
// i_io_sw[ 15 ]
initial
begin
	i_io_sw[15] = 1'b1;
end 
// i_io_sw[ 14 ]
initial
begin
	i_io_sw[14] = 1'b1;
end 
// i_io_sw[ 13 ]
initial
begin
	i_io_sw[13] = 1'b1;
end 
// i_io_sw[ 12 ]
initial
begin
	i_io_sw[12] = 1'b1;
end 
// i_io_sw[ 11 ]
initial
begin
	i_io_sw[11] = 1'b1;
end 
// i_io_sw[ 10 ]
initial
begin
	i_io_sw[10] = 1'b1;
end 
// i_io_sw[ 9 ]
initial
begin
	i_io_sw[9] = 1'b1;
end 
// i_io_sw[ 8 ]
initial
begin
	i_io_sw[8] = 1'b1;
end 
// i_io_sw[ 7 ]
initial
begin
	i_io_sw[7] = 1'b1;
end 
// i_io_sw[ 6 ]
initial
begin
	i_io_sw[6] = 1'b1;
end 
// i_io_sw[ 5 ]
initial
begin
	i_io_sw[5] = 1'b1;
end 
// i_io_sw[ 4 ]
initial
begin
	i_io_sw[4] = 1'b1;
end 
// i_io_sw[ 3 ]
initial
begin
	i_io_sw[3] = 1'b1;
end 
// i_io_sw[ 2 ]
initial
begin
	i_io_sw[2] = 1'b1;
end 
// i_io_sw[ 1 ]
initial
begin
	i_io_sw[1] = 1'b1;
end 
// i_io_sw[ 0 ]
initial
begin
	i_io_sw[0] = 1'b1;
end 

// i_rst_n
initial
begin
	i_rst_n = 1'b1;
end 

pipeline_vlg_sample_tst tb_sample (
	.i_clk(i_clk),
	.i_io_btn(i_io_btn),
	.i_io_sw(i_io_sw),
	.i_rst_n(i_rst_n),
	.sampler_tx(sampler)
);

pipeline_vlg_check_tst tb_out(
	.ForwardAE_check(ForwardAE_check),
	.ForwardBE_check(ForwardBE_check),
	.alu_data_M_check(alu_data_M_check),
	.checker1(checker1),
	.checker2(checker2),
	.checker3(checker3),
	.checker4(checker4),
	.ldStall_check(ldStall_check),
	.o_insn_vld(o_insn_vld),
	.o_io_hex0(o_io_hex0),
	.o_io_hex1(o_io_hex1),
	.o_io_hex2(o_io_hex2),
	.o_io_hex3(o_io_hex3),
	.o_io_hex4(o_io_hex4),
	.o_io_hex5(o_io_hex5),
	.o_io_hex6(o_io_hex6),
	.o_io_hex7(o_io_hex7),
	.o_io_lcd(o_io_lcd),
	.o_io_ledg(o_io_ledg),
	.o_io_ledr(o_io_ledr),
	.o_pc_debug(o_pc_debug),
	.rs1_data_HE_check(rs1_data_HE_check),
	.rs2_data_HE_check(rs2_data_HE_check),
	.rs2_data_HM_check(rs2_data_HM_check),
	.sampler_rx(sampler)
);
endmodule

